Top-down syntax generation:
<Start> =>
class ?<< current: class expected: <identifier> >>
class LINEAR ?<< current: LINEAR expected: { >>
class LINEAR { ?<< current: { expected: private >>
class LINEAR { private ?<< current: private expected: attribute >>
class LINEAR { private attribute ?<< current: attribute expected: <identifier> >>
class LINEAR { private attribute a ?<< current: a expected: : >>
class LINEAR { private attribute a : ?<< current: : expected: float >>
class LINEAR { private attribute a : float ?<< current: float expected: ; >>
class LINEAR { private attribute a : float ; ?<< current: ; expected: private >>
class LINEAR { private attribute a : float ; private ?<< current: private expected: attribute >>
class LINEAR { private attribute a : float ; private attribute ?<< current: attribute expected: <identifier> >>
class LINEAR { private attribute a : float ; private attribute b ?<< current: b expected: : >>
class LINEAR { private attribute a : float ; private attribute b : ?<< current: : expected: float >>
class LINEAR { private attribute a : float ; private attribute b : float ?<< current: float expected: ; >>
class LINEAR { private attribute a : float ; private attribute b : float ; ?<< current: ; expected: public >>
class LINEAR { private attribute a : float ; private attribute b : float ; public ?<< current: public expected: constructor >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor ?<< current: constructor expected: : >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ?<< current: : expected: ( >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( ?<< current: ( expected: <identifier> >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A ?<< current: A expected: : >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : ?<< current: : expected: float >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float ?<< current: float expected: , >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , ?<< current: , expected: <identifier> >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B ?<< current: B expected: : >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : ?<< current: : expected: float >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ?<< current: float expected: ) >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ?<< current: ) expected: ; >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; ?<< current: ; expected: } >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ?<< current: } expected: ; >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; ?<< current: ; expected: class >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class ?<< current: class expected: <identifier> >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC ?<< current: QUADRATIC expected: { >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { ?<< current: { expected: private >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private ?<< current: private expected: attribute >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute ?<< current: attribute expected: <identifier> >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a ?<< current: a expected: : >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : ?<< current: : expected: float >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ?<< current: float expected: ; >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; ?<< current: ; expected: private >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private ?<< current: private expected: attribute >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute ?<< current: attribute expected: <identifier> >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b ?<< current: b expected: : >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : ?<< current: : expected: float >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ?<< current: float expected: ; >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; ?<< current: ; expected: private >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private ?<< current: private expected: attribute >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute ?<< current: attribute expected: <identifier> >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c ?<< current: c expected: : >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : ?<< current: : expected: float >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ?<< current: float expected: ; >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; ?<< current: ; expected: public >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public ?<< current: public expected: constructor >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor ?<< current: constructor expected: : >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ?<< current: : expected: ( >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( ?<< current: ( expected: <identifier> >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A ?<< current: A expected: : >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : ?<< current: : expected: float >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float ?<< current: float expected: , >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , ?<< current: , expected: <identifier> >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B ?<< current: B expected: : >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : ?<< current: : expected: float >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float ?<< current: float expected: , >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , ?<< current: , expected: <identifier> >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C ?<< current: C expected: : >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : ?<< current: : expected: float >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ?<< current: float expected: ) >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ?<< current: ) expected: ; >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; ?<< current: ; expected: } >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ?<< current: } expected: ; >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; ?<< current: ; expected: function >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function ?<< current: function expected: <identifier> >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC ?<< current: QUADRATIC expected: sr >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: ?<< current: :: expected: constructor >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ?<< current: constructor expected: ( >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( ?<< current: ( expected: <identifier> >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A ?<< current: A expected: : >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : ?<< current: : expected: float >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float ?<< current: float expected: , >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , ?<< current: , expected: <identifier> >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B ?<< current: B expected: : >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : ?<< current: : expected: float >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float ?<< current: float expected: , >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , ?<< current: , expected: <identifier> >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C ?<< current: C expected: : >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : ?<< current: : expected: float >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ?<< current: float expected: ) >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) ?<< current: ) expected: { >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { ?<< current: { expected: <identifier> >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self ?<< current: self expected: . >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . ?<< current: . expected: <identifier> >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k ?<< current: k expected: = >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = ?<< current: = expected: <identifier> >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ?<< current: A expected: ; >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; ?<< current: ; expected: <identifier> >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self ?<< current: self expected: . >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . ?<< current: . expected: <identifier> >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t ?<< current: t expected: = >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = ?<< current: = expected: <identifier> >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ?<< current: B expected: ; >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; ?<< current: ; expected: <identifier> >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self ?<< current: self expected: . >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . ?<< current: . expected: <identifier> >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k ?<< current: k expected: = >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = ?<< current: = expected: <identifier> >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ?<< current: C expected: ; >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; ?<< current: ; expected: } >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } ?<< current: } expected: function >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } function ?<< current: function expected: <identifier> >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } function LINEAR ?<< current: LINEAR expected: sr >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } function LINEAR :: ?<< current: :: expected: constructor >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } function LINEAR :: constructor ?<< current: constructor expected: ( >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } function LINEAR :: constructor ( ?<< current: ( expected: <identifier> >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } function LINEAR :: constructor ( A ?<< current: A expected: : >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } function LINEAR :: constructor ( A : ?<< current: : expected: float >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } function LINEAR :: constructor ( A : float ?<< current: float expected: , >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } function LINEAR :: constructor ( A : float , ?<< current: , expected: <identifier> >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } function LINEAR :: constructor ( A : float , B ?<< current: B expected: : >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } function LINEAR :: constructor ( A : float , B : ?<< current: : expected: float >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } function LINEAR :: constructor ( A : float , B : float ?<< current: float expected: ) >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } function LINEAR :: constructor ( A : float , B : float ) ?<< current: ) expected: { >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } function LINEAR :: constructor ( A : float , B : float ) { ?<< current: { expected: <identifier> >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } function LINEAR :: constructor ( A : float , B : float ) { self ?<< current: self expected: . >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . ?<< current: . expected: <identifier> >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a ?<< current: a expected: = >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = ?<< current: = expected: <identifier> >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ?<< current: A expected: ; >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; ?<< current: ; expected: <identifier> >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self ?<< current: self expected: . >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . ?<< current: . expected: <identifier> >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b ?<< current: b expected: = >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = ?<< current: = expected: <identifier> >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ?<< current: B expected: ; >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; ?<< current: ; expected: } >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } ?<< current: } expected: function >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function ?<< current: function expected: <identifier> >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function main ?<< current: main expected: ( >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function main ( ?<< current: ( expected: ) >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function main ( ) ?<< current: ) expected: arrow >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function main ( ) => ?<< current: => expected: void >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function main ( ) => void ?<< current: void expected: { >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function main ( ) => void { ?<< current: { expected: localVar >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function main ( ) => void { localvar ?<< current: localvar expected: <identifier> >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function main ( ) => void { localvar f1 ?<< current: f1 expected: : >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function main ( ) => void { localvar f1 : ?<< current: : expected: <identifier> >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function main ( ) => void { localvar f1 : QUADRATIC ?<< current: QUADRATIC expected: ; >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function main ( ) => void { localvar f1 : QUADRATIC ; ?<< current: ; expected: localVar >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function main ( ) => void { localvar f1 : QUADRATIC ; localvar ?<< current: localvar expected: <identifier> >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function main ( ) => void { localvar f1 : QUADRATIC ; localvar k ?<< current: k expected: : >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function main ( ) => void { localvar f1 : QUADRATIC ; localvar k : ?<< current: : expected: <identifier> >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function main ( ) => void { localvar f1 : QUADRATIC ; localvar k : string ?<< current: string expected: ; >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function main ( ) => void { localvar f1 : QUADRATIC ; localvar k : string ; ?<< current: ; expected: <identifier> >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function main ( ) => void { localvar f1 : QUADRATIC ; localvar k : string ; f1 ?<< current: f1 expected: . >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function main ( ) => void { localvar f1 : QUADRATIC ; localvar k : string ; f1 . ?<< current: . expected: <identifier> >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function main ( ) => void { localvar f1 : QUADRATIC ; localvar k : string ; f1 . a ?<< current: a expected: = >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function main ( ) => void { localvar f1 : QUADRATIC ; localvar k : string ; f1 . a = ?<< current: = expected: <identifier> >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function main ( ) => void { localvar f1 : QUADRATIC ; localvar k : string ; f1 . a = k ?<< current: k expected: ; >>
class LINEAR { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; } ; class QUADRATIC { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; } ; function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . k = A ; self . t = B ; self . k = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function main ( ) => void { localvar f1 : QUADRATIC ; localvar k : string ; f1 . a = k ; ?<< current: ; expected: } >>


Sytax Tokens:
Lexeme: class	Code: Class	Line: 1	Column: 6
Lexeme: LINEAR	Code: Id	Line: 1	Column: 13
Lexeme: {	Code: LeftBracket	Line: 1	Column: 14
Lexeme: private	Code: Private	Line: 2	Column: 10
Lexeme: attribute	Code: attribute	Line: 2	Column: 20
Lexeme: a	Code: Id	Line: 2	Column: 22
Lexeme: :	Code: Colon	Line: 2	Column: 23
Lexeme: float	Code: Float	Line: 2	Column: 29
Lexeme: ;	Code: Semicolon	Line: 2	Column: 29
Lexeme: private	Code: Private	Line: 3	Column: 10
Lexeme: attribute	Code: attribute	Line: 3	Column: 20
Lexeme: b	Code: Id	Line: 3	Column: 22
Lexeme: :	Code: Colon	Line: 3	Column: 23
Lexeme: float	Code: Float	Line: 3	Column: 29
Lexeme: ;	Code: Semicolon	Line: 3	Column: 29
Lexeme: public	Code: Public	Line: 4	Column: 9
Lexeme: constructor	Code: constructor	Line: 4	Column: 22
Lexeme: :	Code: Colon	Line: 4	Column: 23
Lexeme: (	Code: LeftParenthesis	Line: 4	Column: 24
Lexeme: A	Code: Id	Line: 4	Column: 26
Lexeme: :	Code: Colon	Line: 4	Column: 27
Lexeme: float	Code: Float	Line: 4	Column: 33
Lexeme: ,	Code: Comma	Line: 4	Column: 33
Lexeme: B	Code: Id	Line: 4	Column: 36
Lexeme: :	Code: Colon	Line: 4	Column: 37
Lexeme: float	Code: Float	Line: 4	Column: 43
Lexeme: )	Code: RightParenthesis	Line: 4	Column: 43
Lexeme: ;	Code: Semicolon	Line: 4	Column: 44
Lexeme: }	Code: RightBracket	Line: 5	Column: 1
Lexeme: ;	Code: Semicolon	Line: 5	Column: 2
Lexeme: class	Code: Class	Line: 7	Column: 6
Lexeme: QUADRATIC	Code: Id	Line: 7	Column: 16
Lexeme: {	Code: LeftBracket	Line: 7	Column: 16
Lexeme: private	Code: Private	Line: 8	Column: 10
Lexeme: attribute	Code: attribute	Line: 8	Column: 20
Lexeme: a	Code: Id	Line: 8	Column: 22
Lexeme: :	Code: Colon	Line: 8	Column: 23
Lexeme: float	Code: Float	Line: 8	Column: 29
Lexeme: ;	Code: Semicolon	Line: 8	Column: 29
Lexeme: private	Code: Private	Line: 9	Column: 10
Lexeme: attribute	Code: attribute	Line: 9	Column: 20
Lexeme: b	Code: Id	Line: 9	Column: 22
Lexeme: :	Code: Colon	Line: 9	Column: 23
Lexeme: float	Code: Float	Line: 9	Column: 29
Lexeme: ;	Code: Semicolon	Line: 9	Column: 29
Lexeme: private	Code: Private	Line: 10	Column: 10
Lexeme: attribute	Code: attribute	Line: 10	Column: 20
Lexeme: c	Code: Id	Line: 10	Column: 22
Lexeme: :	Code: Colon	Line: 10	Column: 23
Lexeme: float	Code: Float	Line: 10	Column: 29
Lexeme: ;	Code: Semicolon	Line: 10	Column: 29
Lexeme: public	Code: Public	Line: 11	Column: 9
Lexeme: constructor	Code: constructor	Line: 11	Column: 22
Lexeme: :	Code: Colon	Line: 11	Column: 23
Lexeme: (	Code: LeftParenthesis	Line: 11	Column: 24
Lexeme: A	Code: Id	Line: 11	Column: 26
Lexeme: :	Code: Colon	Line: 11	Column: 27
Lexeme: float	Code: Float	Line: 11	Column: 33
Lexeme: ,	Code: Comma	Line: 11	Column: 33
Lexeme: B	Code: Id	Line: 11	Column: 36
Lexeme: :	Code: Colon	Line: 11	Column: 37
Lexeme: float	Code: Float	Line: 11	Column: 43
Lexeme: ,	Code: Comma	Line: 11	Column: 43
Lexeme: C	Code: Id	Line: 11	Column: 46
Lexeme: :	Code: Colon	Line: 11	Column: 47
Lexeme: float	Code: Float	Line: 11	Column: 53
Lexeme: )	Code: RightParenthesis	Line: 11	Column: 53
Lexeme: ;	Code: Semicolon	Line: 11	Column: 54
Lexeme: }	Code: RightBracket	Line: 12	Column: 1
Lexeme: ;	Code: Semicolon	Line: 12	Column: 2
Lexeme: function	Code: function	Line: 15	Column: 9
Lexeme: QUADRATIC	Code: Id	Line: 15	Column: 19
Lexeme: ::	Code: sr	Line: 15	Column: 20
Lexeme: constructor	Code: constructor	Line: 15	Column: 32
Lexeme: (	Code: LeftParenthesis	Line: 15	Column: 32
Lexeme: A	Code: Id	Line: 15	Column: 34
Lexeme: :	Code: Colon	Line: 15	Column: 35
Lexeme: float	Code: Float	Line: 15	Column: 41
Lexeme: ,	Code: Comma	Line: 15	Column: 41
Lexeme: B	Code: Id	Line: 15	Column: 44
Lexeme: :	Code: Colon	Line: 15	Column: 45
Lexeme: float	Code: Float	Line: 15	Column: 51
Lexeme: ,	Code: Comma	Line: 15	Column: 51
Lexeme: C	Code: Id	Line: 15	Column: 54
Lexeme: :	Code: Colon	Line: 15	Column: 55
Lexeme: float	Code: Float	Line: 15	Column: 61
Lexeme: )	Code: RightParenthesis	Line: 15	Column: 61
Lexeme: {	Code: LeftBracket	Line: 16	Column: 1
Lexeme: self	Code: Id	Line: 17	Column: 7
Lexeme: .	Code: dot	Line: 17	Column: 7
Lexeme: k	Code: Id	Line: 17	Column: 9
Lexeme: =	Code: Equal	Line: 17	Column: 11
Lexeme: A	Code: Id	Line: 17	Column: 13
Lexeme: ;	Code: Semicolon	Line: 17	Column: 13
Lexeme: self	Code: Id	Line: 18	Column: 7
Lexeme: .	Code: dot	Line: 18	Column: 7
Lexeme: t	Code: Id	Line: 18	Column: 9
Lexeme: =	Code: Equal	Line: 18	Column: 11
Lexeme: B	Code: Id	Line: 18	Column: 13
Lexeme: ;	Code: Semicolon	Line: 18	Column: 13
Lexeme: self	Code: Id	Line: 19	Column: 7
Lexeme: .	Code: dot	Line: 19	Column: 7
Lexeme: k	Code: Id	Line: 19	Column: 9
Lexeme: =	Code: Equal	Line: 19	Column: 11
Lexeme: C	Code: Id	Line: 19	Column: 13
Lexeme: ;	Code: Semicolon	Line: 19	Column: 13
Lexeme: }	Code: RightBracket	Line: 20	Column: 1
Lexeme: function	Code: function	Line: 22	Column: 9
Lexeme: LINEAR	Code: Id	Line: 22	Column: 16
Lexeme: ::	Code: sr	Line: 22	Column: 17
Lexeme: constructor	Code: constructor	Line: 22	Column: 29
Lexeme: (	Code: LeftParenthesis	Line: 22	Column: 29
Lexeme: A	Code: Id	Line: 22	Column: 31
Lexeme: :	Code: Colon	Line: 22	Column: 32
Lexeme: float	Code: Float	Line: 22	Column: 38
Lexeme: ,	Code: Comma	Line: 22	Column: 38
Lexeme: B	Code: Id	Line: 22	Column: 41
Lexeme: :	Code: Colon	Line: 22	Column: 42
Lexeme: float	Code: Float	Line: 22	Column: 48
Lexeme: )	Code: RightParenthesis	Line: 22	Column: 48
Lexeme: {	Code: LeftBracket	Line: 23	Column: 1
Lexeme: self	Code: Id	Line: 24	Column: 7
Lexeme: .	Code: dot	Line: 24	Column: 7
Lexeme: a	Code: Id	Line: 24	Column: 9
Lexeme: =	Code: Equal	Line: 24	Column: 11
Lexeme: A	Code: Id	Line: 24	Column: 13
Lexeme: ;	Code: Semicolon	Line: 24	Column: 13
Lexeme: self	Code: Id	Line: 25	Column: 7
Lexeme: .	Code: dot	Line: 25	Column: 7
Lexeme: b	Code: Id	Line: 25	Column: 9
Lexeme: =	Code: Equal	Line: 25	Column: 11
Lexeme: B	Code: Id	Line: 25	Column: 13
Lexeme: ;	Code: Semicolon	Line: 25	Column: 13
Lexeme: }	Code: RightBracket	Line: 26	Column: 1
Lexeme: function	Code: function	Line: 28	Column: 9
Lexeme: main	Code: Id	Line: 28	Column: 14
Lexeme: (	Code: LeftParenthesis	Line: 28	Column: 14
Lexeme: )	Code: RightParenthesis	Line: 28	Column: 15
Lexeme: =>	Code: arrow	Line: 28	Column: 17
Lexeme: void	Code: Void	Line: 28	Column: 22
Lexeme: {	Code: LeftBracket	Line: 29	Column: 1
Lexeme: localvar	Code: localVar	Line: 30	Column: 12
Lexeme: f1	Code: Id	Line: 30	Column: 15
Lexeme: :	Code: Colon	Line: 30	Column: 16
Lexeme: QUADRATIC	Code: Id	Line: 30	Column: 26
Lexeme: ;	Code: Semicolon	Line: 30	Column: 26
Lexeme: localvar	Code: localVar	Line: 31	Column: 12
Lexeme: k	Code: Id	Line: 31	Column: 14
Lexeme: :	Code: Colon	Line: 31	Column: 15
Lexeme: string	Code: Id	Line: 31	Column: 22
Lexeme: ;	Code: Semicolon	Line: 31	Column: 22
Lexeme: f1	Code: Id	Line: 32	Column: 6
Lexeme: .	Code: dot	Line: 32	Column: 6
Lexeme: a	Code: Id	Line: 32	Column: 8
Lexeme: =	Code: Equal	Line: 32	Column: 10
Lexeme: k	Code: Id	Line: 32	Column: 12
Lexeme: ;	Code: Semicolon	Line: 32	Column: 12


Complete Dervation tree, Code structure:
Start => 
class <identifier> { 
private attribute <identifier> : float ; 
private attribute <identifier> : float ; 
public constructor : ( <identifier> : float , <identifier> : float ) ; 
} 
; 
class <identifier> { 
private attribute <identifier> : float ; 
private attribute <identifier> : float ; 
private attribute <identifier> : float ; 
public constructor : ( <identifier> : float , <identifier> : float , <identifier> : float ) ; 
} 
; 
function <identifier> sr constructor ( <identifier> : float , <identifier> : float , <identifier> : float ) { 
<identifier> . <identifier> = <identifier> ; 
<identifier> . <identifier> = <identifier> ; 
<identifier> . <identifier> = <identifier> ; 
} 
function <identifier> sr constructor ( <identifier> : float , <identifier> : float ) { 
<identifier> . <identifier> = <identifier> ; 
<identifier> . <identifier> = <identifier> ; 
} 
function <identifier> ( ) arrow void { 
localVar <identifier> : <identifier> ; 
localVar <identifier> : <identifier> ; 
<identifier> . <identifier> = <identifier> ; 
