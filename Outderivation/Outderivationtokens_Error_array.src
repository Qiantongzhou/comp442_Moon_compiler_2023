Top-down syntax generation:
<Start> =>
function ?<< current: function expected: <identifier> >>
function typeerror ?<< current: typeerror expected: ( >>
function typeerror ( ?<< current: ( expected: ) >>
function typeerror ( ) ?<< current: ) expected: arrow >>
function typeerror ( ) => ?<< current: => expected: void >>
function typeerror ( ) => void ?<< current: void expected: { >>
function typeerror ( ) => void { ?<< current: { expected: localVar >>
function typeerror ( ) => void { localvar ?<< current: localvar expected: <identifier> >>
function typeerror ( ) => void { localvar arr ?<< current: arr expected: : >>
function typeerror ( ) => void { localvar arr : ?<< current: : expected: integer >>
function typeerror ( ) => void { localvar arr : integer ?<< current: integer expected: [ >>
function typeerror ( ) => void { localvar arr : integer [ ?<< current: [ expected: intLit >>
function typeerror ( ) => void { localvar arr : integer [ 7 ?<< current: 7 expected: ] >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ?<< current: ] expected: ; >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; ?<< current: ; expected: } >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } ?<< current: } expected: function >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function ?<< current: function expected: <identifier> >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ?<< current: dimension expected: ( >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ?<< current: ( expected: ) >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) ?<< current: ) expected: arrow >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => ?<< current: => expected: void >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void ?<< current: void expected: { >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { ?<< current: { expected: localVar >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar ?<< current: localvar expected: <identifier> >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr ?<< current: arr expected: : >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : ?<< current: : expected: integer >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer ?<< current: integer expected: [ >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ ?<< current: [ expected: intLit >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ?<< current: 7 expected: ] >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ?<< current: ] expected: ; >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; ?<< current: ; expected: <identifier> >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr ?<< current: arr expected: [ >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ ?<< current: [ expected: intLit >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ?<< current: 1 expected: ] >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] ?<< current: ] expected: = >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = ?<< current: = expected: intLit >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ?<< current: 64 expected: ; >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; ?<< current: ; expected: } >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } ?<< current: } expected: function >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function ?<< current: function expected: <identifier> >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ?<< current: main expected: ( >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ?<< current: ( expected: ) >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) ?<< current: ) expected: arrow >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => ?<< current: => expected: void >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void ?<< current: void expected: { >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { ?<< current: { expected: localVar >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar ?<< current: localvar expected: <identifier> >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr ?<< current: arr expected: : >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : ?<< current: : expected: integer >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer ?<< current: integer expected: [ >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ ?<< current: [ expected: intLit >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ?<< current: 7 expected: ] >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ?<< current: ] expected: ; >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ; ?<< current: ; expected: <identifier> >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ; arr ?<< current: arr expected: [ >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ; arr [ ?<< current: [ expected: floatLit >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1.1 ?<< current: 1.1 expected: ] >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1.1 ] ?<< current: ] expected: = >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1.1 ] = ?<< current: = expected: intLit >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1.1 ] = 64 ?<< current: 64 expected: ; >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1.1 ] = 64 ; ?<< current: ; expected: <identifier> >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1.1 ] = 64 ; arr ?<< current: arr expected: [ >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1.1 ] = 64 ; arr [ ?<< current: [ expected: intLit >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1.1 ] = 64 ; arr [ 1 ?<< current: 1 expected: ] >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1.1 ] = 64 ; arr [ 1 ] ?<< current: ] expected: = >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1.1 ] = 64 ; arr [ 1 ] = ?<< current: = expected: intLit >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1.1 ] = 64 ; arr [ 1 ] = 34 ?<< current: 34 expected: ; >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1.1 ] = 64 ; arr [ 1 ] = 34 ; ?<< current: ; expected: <identifier> >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1.1 ] = 64 ; arr [ 1 ] = 34 ; arr ?<< current: arr expected: [ >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1.1 ] = 64 ; arr [ 1 ] = 34 ; arr [ ?<< current: [ expected: intLit >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1.1 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ?<< current: 2 expected: ] >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1.1 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] ?<< current: ] expected: = >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1.1 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = ?<< current: = expected: intLit >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1.1 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ?<< current: 25 expected: ; >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1.1 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; ?<< current: ; expected: <identifier> >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1.1 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; arr ?<< current: arr expected: [ >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1.1 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; arr [ ?<< current: [ expected: intLit >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1.1 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; arr [ 3 ?<< current: 3 expected: ] >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1.1 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; arr [ 3 ] ?<< current: ] expected: = >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1.1 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; arr [ 3 ] = ?<< current: = expected: intLit >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1.1 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; arr [ 3 ] = 12 ?<< current: 12 expected: ; >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1.1 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; arr [ 3 ] = 12 ; ?<< current: ; expected: <identifier> >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1.1 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; arr [ 3 ] = 12 ; arr ?<< current: arr expected: [ >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1.1 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; arr [ 3 ] = 12 ; arr [ ?<< current: [ expected: intLit >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1.1 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; arr [ 3 ] = 12 ; arr [ 4 ?<< current: 4 expected: ] >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1.1 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; arr [ 3 ] = 12 ; arr [ 4 ] ?<< current: ] expected: = >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1.1 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; arr [ 3 ] = 12 ; arr [ 4 ] = ?<< current: = expected: intLit >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1.1 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; arr [ 3 ] = 12 ; arr [ 4 ] = 22 ?<< current: 22 expected: ; >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1.1 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; arr [ 3 ] = 12 ; arr [ 4 ] = 22 ; ?<< current: ; expected: <identifier> >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1.1 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; arr [ 3 ] = 12 ; arr [ 4 ] = 22 ; arr ?<< current: arr expected: [ >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1.1 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; arr [ 3 ] = 12 ; arr [ 4 ] = 22 ; arr [ ?<< current: [ expected: intLit >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1.1 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; arr [ 3 ] = 12 ; arr [ 4 ] = 22 ; arr [ 5 ?<< current: 5 expected: ] >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1.1 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; arr [ 3 ] = 12 ; arr [ 4 ] = 22 ; arr [ 5 ] ?<< current: ] expected: = >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1.1 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; arr [ 3 ] = 12 ; arr [ 4 ] = 22 ; arr [ 5 ] = ?<< current: = expected: intLit >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1.1 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; arr [ 3 ] = 12 ; arr [ 4 ] = 22 ; arr [ 5 ] = 11 ?<< current: 11 expected: ; >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1.1 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; arr [ 3 ] = 12 ; arr [ 4 ] = 22 ; arr [ 5 ] = 11 ; ?<< current: ; expected: <identifier> >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1.1 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; arr [ 3 ] = 12 ; arr [ 4 ] = 22 ; arr [ 5 ] = 11 ; arr ?<< current: arr expected: [ >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1.1 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; arr [ 3 ] = 12 ; arr [ 4 ] = 22 ; arr [ 5 ] = 11 ; arr [ ?<< current: [ expected: intLit >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1.1 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; arr [ 3 ] = 12 ; arr [ 4 ] = 22 ; arr [ 5 ] = 11 ; arr [ 6 ?<< current: 6 expected: ] >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1.1 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; arr [ 3 ] = 12 ; arr [ 4 ] = 22 ; arr [ 5 ] = 11 ; arr [ 6 ] ?<< current: ] expected: = >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1.1 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; arr [ 3 ] = 12 ; arr [ 4 ] = 22 ; arr [ 5 ] = 11 ; arr [ 6 ] = ?<< current: = expected: intLit >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1.1 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; arr [ 3 ] = 12 ; arr [ 4 ] = 22 ; arr [ 5 ] = 11 ; arr [ 6 ] = 90 ?<< current: 90 expected: ; >>
function typeerror ( ) => void { localvar arr : integer [ 7 ] ; } function dimension ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1 ] = 64 ; } function main ( ) => void { localvar arr : integer [ 7 ] ; arr [ 1.1 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; arr [ 3 ] = 12 ; arr [ 4 ] = 22 ; arr [ 5 ] = 11 ; arr [ 6 ] = 90 ; ?<< current: ; expected: } >>


Sytax Tokens:
Lexeme: function	Code: function	Line: 1	Column: 9
Lexeme: typeerror	Code: Id	Line: 1	Column: 19
Lexeme: (	Code: LeftParenthesis	Line: 1	Column: 19
Lexeme: )	Code: RightParenthesis	Line: 1	Column: 20
Lexeme: =>	Code: arrow	Line: 1	Column: 23
Lexeme: void	Code: Void	Line: 1	Column: 29
Lexeme: {	Code: LeftBracket	Line: 2	Column: 1
Lexeme: localvar	Code: localVar	Line: 3	Column: 11
Lexeme: arr	Code: Id	Line: 3	Column: 15
Lexeme: :	Code: Colon	Line: 3	Column: 16
Lexeme: integer	Code: Integer	Line: 3	Column: 24
Lexeme: [	Code: zhongkuoL	Line: 3	Column: 24
Lexeme: 7	Code: intLit	Line: 3	Column: 26
Lexeme: ]	Code: zhongkuoR	Line: 3	Column: 26
Lexeme: ;	Code: Semicolon	Line: 3	Column: 27
Lexeme: }	Code: RightBracket	Line: 6	Column: 1
Lexeme: function	Code: function	Line: 8	Column: 9
Lexeme: dimension	Code: Id	Line: 8	Column: 19
Lexeme: (	Code: LeftParenthesis	Line: 8	Column: 19
Lexeme: )	Code: RightParenthesis	Line: 8	Column: 20
Lexeme: =>	Code: arrow	Line: 8	Column: 23
Lexeme: void	Code: Void	Line: 8	Column: 29
Lexeme: {	Code: LeftBracket	Line: 9	Column: 1
Lexeme: localvar	Code: localVar	Line: 10	Column: 11
Lexeme: arr	Code: Id	Line: 10	Column: 15
Lexeme: :	Code: Colon	Line: 10	Column: 16
Lexeme: integer	Code: Integer	Line: 10	Column: 24
Lexeme: [	Code: zhongkuoL	Line: 10	Column: 24
Lexeme: 7	Code: intLit	Line: 10	Column: 26
Lexeme: ]	Code: zhongkuoR	Line: 10	Column: 26
Lexeme: ;	Code: Semicolon	Line: 10	Column: 27
Lexeme: arr	Code: Id	Line: 11	Column: 6
Lexeme: [	Code: zhongkuoL	Line: 11	Column: 6
Lexeme: 1	Code: intLit	Line: 11	Column: 8
Lexeme: ]	Code: zhongkuoR	Line: 11	Column: 8
Lexeme: =	Code: Equal	Line: 11	Column: 11
Lexeme: 64	Code: intLit	Line: 11	Column: 14
Lexeme: ;	Code: Semicolon	Line: 11	Column: 14
Lexeme: }	Code: RightBracket	Line: 13	Column: 1
Lexeme: function	Code: function	Line: 14	Column: 9
Lexeme: main	Code: Id	Line: 14	Column: 14
Lexeme: (	Code: LeftParenthesis	Line: 14	Column: 14
Lexeme: )	Code: RightParenthesis	Line: 14	Column: 15
Lexeme: =>	Code: arrow	Line: 14	Column: 18
Lexeme: void	Code: Void	Line: 14	Column: 24
Lexeme: {	Code: LeftBracket	Line: 15	Column: 1
Lexeme: localvar	Code: localVar	Line: 16	Column: 11
Lexeme: arr	Code: Id	Line: 16	Column: 15
Lexeme: :	Code: Colon	Line: 16	Column: 16
Lexeme: integer	Code: Integer	Line: 16	Column: 24
Lexeme: [	Code: zhongkuoL	Line: 16	Column: 24
Lexeme: 7	Code: intLit	Line: 16	Column: 26
Lexeme: ]	Code: zhongkuoR	Line: 16	Column: 26
Lexeme: ;	Code: Semicolon	Line: 16	Column: 27
Lexeme: arr	Code: Id	Line: 17	Column: 6
Lexeme: [	Code: zhongkuoL	Line: 17	Column: 6
Lexeme: 1.1	Code: floatLit	Line: 17	Column: 10
Lexeme: ]	Code: zhongkuoR	Line: 17	Column: 10
Lexeme: =	Code: Equal	Line: 17	Column: 13
Lexeme: 64	Code: intLit	Line: 17	Column: 16
Lexeme: ;	Code: Semicolon	Line: 17	Column: 16
Lexeme: arr	Code: Id	Line: 18	Column: 6
Lexeme: [	Code: zhongkuoL	Line: 18	Column: 6
Lexeme: 1	Code: intLit	Line: 18	Column: 8
Lexeme: ]	Code: zhongkuoR	Line: 18	Column: 8
Lexeme: =	Code: Equal	Line: 18	Column: 11
Lexeme: 34	Code: intLit	Line: 18	Column: 14
Lexeme: ;	Code: Semicolon	Line: 18	Column: 14
Lexeme: arr	Code: Id	Line: 19	Column: 6
Lexeme: [	Code: zhongkuoL	Line: 19	Column: 6
Lexeme: 2	Code: intLit	Line: 19	Column: 8
Lexeme: ]	Code: zhongkuoR	Line: 19	Column: 8
Lexeme: =	Code: Equal	Line: 19	Column: 11
Lexeme: 25	Code: intLit	Line: 19	Column: 14
Lexeme: ;	Code: Semicolon	Line: 19	Column: 14
Lexeme: arr	Code: Id	Line: 20	Column: 6
Lexeme: [	Code: zhongkuoL	Line: 20	Column: 6
Lexeme: 3	Code: intLit	Line: 20	Column: 8
Lexeme: ]	Code: zhongkuoR	Line: 20	Column: 8
Lexeme: =	Code: Equal	Line: 20	Column: 11
Lexeme: 12	Code: intLit	Line: 20	Column: 14
Lexeme: ;	Code: Semicolon	Line: 20	Column: 14
Lexeme: arr	Code: Id	Line: 21	Column: 6
Lexeme: [	Code: zhongkuoL	Line: 21	Column: 6
Lexeme: 4	Code: intLit	Line: 21	Column: 8
Lexeme: ]	Code: zhongkuoR	Line: 21	Column: 8
Lexeme: =	Code: Equal	Line: 21	Column: 11
Lexeme: 22	Code: intLit	Line: 21	Column: 14
Lexeme: ;	Code: Semicolon	Line: 21	Column: 14
Lexeme: arr	Code: Id	Line: 22	Column: 6
Lexeme: [	Code: zhongkuoL	Line: 22	Column: 6
Lexeme: 5	Code: intLit	Line: 22	Column: 8
Lexeme: ]	Code: zhongkuoR	Line: 22	Column: 8
Lexeme: =	Code: Equal	Line: 22	Column: 11
Lexeme: 11	Code: intLit	Line: 22	Column: 14
Lexeme: ;	Code: Semicolon	Line: 22	Column: 14
Lexeme: arr	Code: Id	Line: 23	Column: 6
Lexeme: [	Code: zhongkuoL	Line: 23	Column: 6
Lexeme: 6	Code: intLit	Line: 23	Column: 8
Lexeme: ]	Code: zhongkuoR	Line: 23	Column: 8
Lexeme: =	Code: Equal	Line: 23	Column: 11
Lexeme: 90	Code: intLit	Line: 23	Column: 14
Lexeme: ;	Code: Semicolon	Line: 23	Column: 14


Complete Dervation tree, Code structure:
Start => 
function <identifier> ( ) arrow void { 
localVar <identifier> : integer [ intLit ] ; 
} 
function <identifier> ( ) arrow void { 
localVar <identifier> : integer [ intLit ] ; 
<identifier> [ intLit ] = intLit ; 
} 
function <identifier> ( ) arrow void { 
localVar <identifier> : integer [ intLit ] ; 
<identifier> [ floatLit ] = intLit ; 
<identifier> [ intLit ] = intLit ; 
<identifier> [ intLit ] = intLit ; 
<identifier> [ intLit ] = intLit ; 
<identifier> [ intLit ] = intLit ; 
<identifier> [ intLit ] = intLit ; 
<identifier> [ intLit ] = intLit ; 
