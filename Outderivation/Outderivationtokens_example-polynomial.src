Top-down syntax generation:
<Start> =>
class ?<< current: class expected: <identifier> >>
class POLYNOMIAL ?<< current: POLYNOMIAL expected: { >>
class POLYNOMIAL { ?<< current: { expected: public >>
class POLYNOMIAL { public ?<< current: public expected: function >>
class POLYNOMIAL { public function ?<< current: function expected: <identifier> >>
class POLYNOMIAL { public function evaluate ?<< current: evaluate expected: : >>
class POLYNOMIAL { public function evaluate : ?<< current: : expected: ( >>
class POLYNOMIAL { public function evaluate : ( ?<< current: ( expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x ?<< current: x expected: : >>
class POLYNOMIAL { public function evaluate : ( x : ?<< current: : expected: float >>
class POLYNOMIAL { public function evaluate : ( x : float ?<< current: float expected: ) >>
class POLYNOMIAL { public function evaluate : ( x : float ) ?<< current: ) expected: arrow >>
class POLYNOMIAL { public function evaluate : ( x : float ) => ?<< current: => expected: float >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ?<< current: float expected: ; >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; ?<< current: ; expected: } >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ?<< current: } expected: ; >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; ?<< current: ; expected: class >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class ?<< current: class expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR ?<< current: LINEAR expected: isa >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa ?<< current: isa expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL ?<< current: POLYNOMIAL expected: { >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { ?<< current: { expected: private >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private ?<< current: private expected: attribute >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute ?<< current: attribute expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a ?<< current: a expected: : >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : ?<< current: : expected: float >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ?<< current: float expected: ; >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; ?<< current: ; expected: private >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private ?<< current: private expected: attribute >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute ?<< current: attribute expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b ?<< current: b expected: : >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : ?<< current: : expected: float >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ?<< current: float expected: ; >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; ?<< current: ; expected: public >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public ?<< current: public expected: constructor >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor ?<< current: constructor expected: : >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ?<< current: : expected: ( >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( ?<< current: ( expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A ?<< current: A expected: : >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : ?<< current: : expected: float >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float ?<< current: float expected: , >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , ?<< current: , expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B ?<< current: B expected: : >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : ?<< current: : expected: float >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ?<< current: float expected: ) >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ?<< current: ) expected: ; >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; ?<< current: ; expected: public >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public ?<< current: public expected: function >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function ?<< current: function expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate ?<< current: evaluate expected: : >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ?<< current: : expected: ( >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( ?<< current: ( expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x ?<< current: x expected: : >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : ?<< current: : expected: float >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ?<< current: float expected: ) >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) ?<< current: ) expected: arrow >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => ?<< current: => expected: float >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ?<< current: float expected: ; >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; ?<< current: ; expected: } >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ?<< current: } expected: ; >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; ?<< current: ; expected: class >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class ?<< current: class expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC ?<< current: QUADRATIC expected: isa >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa ?<< current: isa expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL ?<< current: POLYNOMIAL expected: { >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { ?<< current: { expected: private >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private ?<< current: private expected: attribute >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute ?<< current: attribute expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a ?<< current: a expected: : >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : ?<< current: : expected: float >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ?<< current: float expected: ; >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; ?<< current: ; expected: private >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private ?<< current: private expected: attribute >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute ?<< current: attribute expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b ?<< current: b expected: : >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : ?<< current: : expected: float >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ?<< current: float expected: ; >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; ?<< current: ; expected: private >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private ?<< current: private expected: attribute >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute ?<< current: attribute expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c ?<< current: c expected: : >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : ?<< current: : expected: float >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ?<< current: float expected: ; >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; ?<< current: ; expected: public >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public ?<< current: public expected: constructor >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor ?<< current: constructor expected: : >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ?<< current: : expected: ( >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( ?<< current: ( expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A ?<< current: A expected: : >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : ?<< current: : expected: float >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float ?<< current: float expected: , >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , ?<< current: , expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B ?<< current: B expected: : >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : ?<< current: : expected: float >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float ?<< current: float expected: , >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , ?<< current: , expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C ?<< current: C expected: : >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : ?<< current: : expected: float >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ?<< current: float expected: ) >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ?<< current: ) expected: ; >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; ?<< current: ; expected: public >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public ?<< current: public expected: function >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function ?<< current: function expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate ?<< current: evaluate expected: : >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ?<< current: : expected: ( >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( ?<< current: ( expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x ?<< current: x expected: : >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : ?<< current: : expected: float >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ?<< current: float expected: ) >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) ?<< current: ) expected: arrow >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => ?<< current: => expected: float >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ?<< current: float expected: ; >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; ?<< current: ; expected: } >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ?<< current: } expected: ; >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; ?<< current: ; expected: function >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function ?<< current: function expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL ?<< current: POLYNOMIAL expected: sr >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: ?<< current: :: expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ?<< current: evaluate expected: ( >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( ?<< current: ( expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x ?<< current: x expected: : >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : ?<< current: : expected: float >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ?<< current: float expected: ) >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) ?<< current: ) expected: arrow >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => ?<< current: => expected: float >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float ?<< current: float expected: { >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { ?<< current: { expected: return >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ?<< current: return expected: ( >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( ?<< current: ( expected: intLit >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ?<< current: 0 expected: ) >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ?<< current: ) expected: ; >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; ?<< current: ; expected: } >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } ?<< current: } expected: function >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function ?<< current: function expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC ?<< current: QUADRATIC expected: sr >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: ?<< current: :: expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ?<< current: evaluate expected: ( >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( ?<< current: ( expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x ?<< current: x expected: : >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : ?<< current: : expected: float >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ?<< current: float expected: ) >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) ?<< current: ) expected: arrow >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => ?<< current: => expected: float >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float ?<< current: float expected: { >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { ?<< current: { expected: localVar >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar ?<< current: localvar expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result ?<< current: result expected: : >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : ?<< current: : expected: float >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ?<< current: float expected: ; >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; ?<< current: ; expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result ?<< current: result expected: = >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = ?<< current: = expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ?<< current: a expected: ; >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; ?<< current: ; expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result ?<< current: result expected: = >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = ?<< current: = expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result ?<< current: result expected: * >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * ?<< current: * expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x ?<< current: x expected: + >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + ?<< current: + expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ?<< current: b expected: ; >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; ?<< current: ; expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result ?<< current: result expected: = >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = ?<< current: = expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result ?<< current: result expected: * >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * ?<< current: * expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x ?<< current: x expected: + >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + ?<< current: + expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ?<< current: c expected: ; >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; ?<< current: ; expected: return >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ?<< current: return expected: ( >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( ?<< current: ( expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ?<< current: result expected: ) >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ?<< current: ) expected: ; >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; ?<< current: ; expected: } >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } ?<< current: } expected: function >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function ?<< current: function expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC ?<< current: QUADRATIC expected: sr >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: ?<< current: :: expected: constructor >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ?<< current: constructor expected: ( >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( ?<< current: ( expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A ?<< current: A expected: : >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : ?<< current: : expected: float >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float ?<< current: float expected: , >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , ?<< current: , expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B ?<< current: B expected: : >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : ?<< current: : expected: float >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float ?<< current: float expected: , >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , ?<< current: , expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C ?<< current: C expected: : >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : ?<< current: : expected: float >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ?<< current: float expected: ) >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) ?<< current: ) expected: { >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { ?<< current: { expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self ?<< current: self expected: . >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . ?<< current: . expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a ?<< current: a expected: = >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = ?<< current: = expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ?<< current: A expected: ; >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; ?<< current: ; expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self ?<< current: self expected: . >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . ?<< current: . expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b ?<< current: b expected: = >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = ?<< current: = expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ?<< current: B expected: ; >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; ?<< current: ; expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self ?<< current: self expected: . >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . ?<< current: . expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c ?<< current: c expected: = >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = ?<< current: = expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ?<< current: C expected: ; >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; ?<< current: ; expected: } >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } ?<< current: } expected: function >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function ?<< current: function expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR ?<< current: LINEAR expected: sr >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: ?<< current: :: expected: constructor >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ?<< current: constructor expected: ( >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( ?<< current: ( expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A ?<< current: A expected: : >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : ?<< current: : expected: float >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float ?<< current: float expected: , >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , ?<< current: , expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B ?<< current: B expected: : >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : ?<< current: : expected: float >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ?<< current: float expected: ) >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) ?<< current: ) expected: { >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { ?<< current: { expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self ?<< current: self expected: . >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . ?<< current: . expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a ?<< current: a expected: = >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = ?<< current: = expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ?<< current: A expected: ; >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; ?<< current: ; expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self ?<< current: self expected: . >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . ?<< current: . expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b ?<< current: b expected: = >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = ?<< current: = expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ?<< current: B expected: ; >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; ?<< current: ; expected: } >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } ?<< current: } expected: function >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function ?<< current: function expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR ?<< current: LINEAR expected: sr >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: ?<< current: :: expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ?<< current: evaluate expected: ( >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( ?<< current: ( expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x ?<< current: x expected: : >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : ?<< current: : expected: float >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ?<< current: float expected: ) >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) ?<< current: ) expected: arrow >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => ?<< current: => expected: float >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float ?<< current: float expected: { >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { ?<< current: { expected: localVar >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar ?<< current: localvar expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result ?<< current: result expected: : >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : ?<< current: : expected: float >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ?<< current: float expected: ; >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; ?<< current: ; expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result ?<< current: result expected: = >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = ?<< current: = expected: floatLit >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ?<< current: 0.0 expected: ; >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; ?<< current: ; expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result ?<< current: result expected: = >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = ?<< current: = expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a ?<< current: a expected: * >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * ?<< current: * expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x ?<< current: x expected: + >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + ?<< current: + expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ?<< current: b expected: ; >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; ?<< current: ; expected: return >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ?<< current: return expected: ( >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( ?<< current: ( expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ?<< current: result expected: ) >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ?<< current: ) expected: ; >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; ?<< current: ; expected: } >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } ?<< current: } expected: function >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function ?<< current: function expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ?<< current: main expected: ( >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ?<< current: ( expected: ) >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) ?<< current: ) expected: arrow >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => ?<< current: => expected: void >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void ?<< current: void expected: { >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { ?<< current: { expected: localVar >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar ?<< current: localvar expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 ?<< current: f1 expected: : >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : ?<< current: : expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ?<< current: LINEAR expected: ( >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( ?<< current: ( expected: intLit >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 ?<< current: 2 expected: , >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , ?<< current: , expected: floatLit >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ?<< current: 3.5 expected: ) >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ?<< current: ) expected: ; >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; ?<< current: ; expected: localVar >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar ?<< current: localvar expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 ?<< current: f2 expected: : >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : ?<< current: : expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ?<< current: QUADRATIC expected: ( >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( ?<< current: ( expected: - >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - ?<< current: - expected: floatLit >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 ?<< current: 2.0 expected: , >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , ?<< current: , expected: floatLit >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 ?<< current: 1.0 expected: , >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , ?<< current: , expected: floatLit >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ?<< current: 0.0 expected: ) >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ?<< current: ) expected: ; >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; ?<< current: ; expected: localVar >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar ?<< current: localvar expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter ?<< current: counter expected: : >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : ?<< current: : expected: integer >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ?<< current: integer expected: ; >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; ?<< current: ; expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter ?<< current: counter expected: = >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = ?<< current: = expected: intLit >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = 1 ?<< current: 1 expected: ; >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = 1 ; ?<< current: ; expected: while >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = 1 ; while ?<< current: while expected: ( >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = 1 ; while ( ?<< current: ( expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = 1 ; while ( counter ?<< current: counter expected: leq >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = 1 ; while ( counter <= ?<< current: <= expected: intLit >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = 1 ; while ( counter <= 10 ?<< current: 10 expected: ) >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = 1 ; while ( counter <= 10 ) ?<< current: ) expected: { >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = 1 ; while ( counter <= 10 ) { ?<< current: { expected: write >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = 1 ; while ( counter <= 10 ) { write ?<< current: write expected: ( >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = 1 ; while ( counter <= 10 ) { write ( ?<< current: ( expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = 1 ; while ( counter <= 10 ) { write ( counter ?<< current: counter expected: ) >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ?<< current: ) expected: ; >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; ?<< current: ; expected: write >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ?<< current: write expected: ( >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( ?<< current: ( expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 ?<< current: f1 expected: . >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . ?<< current: . expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ?<< current: evaluate expected: ( >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( ?<< current: ( expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ?<< current: counter expected: ) >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ?<< current: ) expected: ) >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ?<< current: ) expected: ; >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; ?<< current: ; expected: write >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ?<< current: write expected: ( >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( ?<< current: ( expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 ?<< current: f2 expected: . >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . ?<< current: . expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ?<< current: evaluate expected: ( >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( ?<< current: ( expected: <identifier> >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter ?<< current: counter expected: ) >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter ) ?<< current: ) expected: ) >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter ) ) ?<< current: ) expected: ; >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter ) ) ; ?<< current: ; expected: } >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter ) ) ; } ?<< current: } expected: ; >>
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter ) ) ; } ; ?<< current: ; expected: } >>


Sytax Tokens:
Lexeme: class	Code: Class	Line: 0	Column: 7
Lexeme: POLYNOMIAL	Code: Id	Line: 0	Column: 18
Lexeme: {	Code: LeftBracket	Line: 0	Column: 19
Lexeme: public	Code: Public	Line: 1	Column: 9
Lexeme: function	Code: function	Line: 1	Column: 18
Lexeme: evaluate	Code: Id	Line: 1	Column: 27
Lexeme: :	Code: Colon	Line: 1	Column: 28
Lexeme: (	Code: LeftParenthesis	Line: 1	Column: 29
Lexeme: x	Code: Id	Line: 1	Column: 31
Lexeme: :	Code: Colon	Line: 1	Column: 32
Lexeme: float	Code: Float	Line: 1	Column: 38
Lexeme: )	Code: RightParenthesis	Line: 1	Column: 38
Lexeme: =>	Code: arrow	Line: 1	Column: 41
Lexeme: float	Code: Float	Line: 1	Column: 48
Lexeme: ;	Code: Semicolon	Line: 1	Column: 48
Lexeme: }	Code: RightBracket	Line: 2	Column: 1
Lexeme: ;	Code: Semicolon	Line: 2	Column: 2
Lexeme: class	Code: Class	Line: 4	Column: 6
Lexeme: LINEAR	Code: Id	Line: 4	Column: 13
Lexeme: isa	Code: isa	Line: 4	Column: 17
Lexeme: POLYNOMIAL	Code: Id	Line: 4	Column: 28
Lexeme: {	Code: LeftBracket	Line: 4	Column: 29
Lexeme: private	Code: Private	Line: 5	Column: 10
Lexeme: attribute	Code: attribute	Line: 5	Column: 20
Lexeme: a	Code: Id	Line: 5	Column: 22
Lexeme: :	Code: Colon	Line: 5	Column: 23
Lexeme: float	Code: Float	Line: 5	Column: 29
Lexeme: ;	Code: Semicolon	Line: 5	Column: 29
Lexeme: private	Code: Private	Line: 6	Column: 10
Lexeme: attribute	Code: attribute	Line: 6	Column: 20
Lexeme: b	Code: Id	Line: 6	Column: 22
Lexeme: :	Code: Colon	Line: 6	Column: 23
Lexeme: float	Code: Float	Line: 6	Column: 29
Lexeme: ;	Code: Semicolon	Line: 6	Column: 29
Lexeme: public	Code: Public	Line: 7	Column: 9
Lexeme: constructor	Code: constructor	Line: 7	Column: 22
Lexeme: :	Code: Colon	Line: 7	Column: 23
Lexeme: (	Code: LeftParenthesis	Line: 7	Column: 24
Lexeme: A	Code: Id	Line: 7	Column: 26
Lexeme: :	Code: Colon	Line: 7	Column: 27
Lexeme: float	Code: Float	Line: 7	Column: 33
Lexeme: ,	Code: Comma	Line: 7	Column: 33
Lexeme: B	Code: Id	Line: 7	Column: 36
Lexeme: :	Code: Colon	Line: 7	Column: 37
Lexeme: float	Code: Float	Line: 7	Column: 43
Lexeme: )	Code: RightParenthesis	Line: 7	Column: 43
Lexeme: ;	Code: Semicolon	Line: 7	Column: 44
Lexeme: public	Code: Public	Line: 8	Column: 9
Lexeme: function	Code: function	Line: 8	Column: 19
Lexeme: evaluate	Code: Id	Line: 8	Column: 28
Lexeme: :	Code: Colon	Line: 8	Column: 29
Lexeme: (	Code: LeftParenthesis	Line: 8	Column: 30
Lexeme: x	Code: Id	Line: 8	Column: 32
Lexeme: :	Code: Colon	Line: 8	Column: 33
Lexeme: float	Code: Float	Line: 8	Column: 39
Lexeme: )	Code: RightParenthesis	Line: 8	Column: 39
Lexeme: =>	Code: arrow	Line: 8	Column: 42
Lexeme: float	Code: Float	Line: 8	Column: 49
Lexeme: ;	Code: Semicolon	Line: 8	Column: 49
Lexeme: }	Code: RightBracket	Line: 9	Column: 1
Lexeme: ;	Code: Semicolon	Line: 9	Column: 2
Lexeme: class	Code: Class	Line: 11	Column: 6
Lexeme: QUADRATIC	Code: Id	Line: 11	Column: 16
Lexeme: isa	Code: isa	Line: 11	Column: 20
Lexeme: POLYNOMIAL	Code: Id	Line: 11	Column: 31
Lexeme: {	Code: LeftBracket	Line: 11	Column: 32
Lexeme: private	Code: Private	Line: 12	Column: 10
Lexeme: attribute	Code: attribute	Line: 12	Column: 20
Lexeme: a	Code: Id	Line: 12	Column: 22
Lexeme: :	Code: Colon	Line: 12	Column: 23
Lexeme: float	Code: Float	Line: 12	Column: 29
Lexeme: ;	Code: Semicolon	Line: 12	Column: 29
Lexeme: private	Code: Private	Line: 13	Column: 10
Lexeme: attribute	Code: attribute	Line: 13	Column: 20
Lexeme: b	Code: Id	Line: 13	Column: 22
Lexeme: :	Code: Colon	Line: 13	Column: 23
Lexeme: float	Code: Float	Line: 13	Column: 29
Lexeme: ;	Code: Semicolon	Line: 13	Column: 29
Lexeme: private	Code: Private	Line: 14	Column: 10
Lexeme: attribute	Code: attribute	Line: 14	Column: 20
Lexeme: c	Code: Id	Line: 14	Column: 22
Lexeme: :	Code: Colon	Line: 14	Column: 23
Lexeme: float	Code: Float	Line: 14	Column: 29
Lexeme: ;	Code: Semicolon	Line: 14	Column: 29
Lexeme: public	Code: Public	Line: 15	Column: 9
Lexeme: constructor	Code: constructor	Line: 15	Column: 22
Lexeme: :	Code: Colon	Line: 15	Column: 23
Lexeme: (	Code: LeftParenthesis	Line: 15	Column: 24
Lexeme: A	Code: Id	Line: 15	Column: 26
Lexeme: :	Code: Colon	Line: 15	Column: 27
Lexeme: float	Code: Float	Line: 15	Column: 33
Lexeme: ,	Code: Comma	Line: 15	Column: 33
Lexeme: B	Code: Id	Line: 15	Column: 36
Lexeme: :	Code: Colon	Line: 15	Column: 37
Lexeme: float	Code: Float	Line: 15	Column: 43
Lexeme: ,	Code: Comma	Line: 15	Column: 43
Lexeme: C	Code: Id	Line: 15	Column: 46
Lexeme: :	Code: Colon	Line: 15	Column: 47
Lexeme: float	Code: Float	Line: 15	Column: 53
Lexeme: )	Code: RightParenthesis	Line: 15	Column: 53
Lexeme: ;	Code: Semicolon	Line: 15	Column: 54
Lexeme: public	Code: Public	Line: 16	Column: 9
Lexeme: function	Code: function	Line: 16	Column: 19
Lexeme: evaluate	Code: Id	Line: 16	Column: 28
Lexeme: :	Code: Colon	Line: 16	Column: 29
Lexeme: (	Code: LeftParenthesis	Line: 16	Column: 30
Lexeme: x	Code: Id	Line: 16	Column: 32
Lexeme: :	Code: Colon	Line: 16	Column: 33
Lexeme: float	Code: Float	Line: 16	Column: 39
Lexeme: )	Code: RightParenthesis	Line: 16	Column: 39
Lexeme: =>	Code: arrow	Line: 16	Column: 42
Lexeme: float	Code: Float	Line: 16	Column: 49
Lexeme: ;	Code: Semicolon	Line: 16	Column: 49
Lexeme: }	Code: RightBracket	Line: 17	Column: 1
Lexeme: ;	Code: Semicolon	Line: 17	Column: 2
Lexeme: function	Code: function	Line: 19	Column: 10
Lexeme: POLYNOMIAL	Code: Id	Line: 19	Column: 21
Lexeme: ::	Code: sr	Line: 19	Column: 22
Lexeme: evaluate	Code: Id	Line: 19	Column: 31
Lexeme: (	Code: LeftParenthesis	Line: 19	Column: 31
Lexeme: x	Code: Id	Line: 19	Column: 33
Lexeme: :	Code: Colon	Line: 19	Column: 34
Lexeme: float	Code: Float	Line: 19	Column: 40
Lexeme: )	Code: RightParenthesis	Line: 19	Column: 40
Lexeme: =>	Code: arrow	Line: 19	Column: 43
Lexeme: float	Code: Float	Line: 19	Column: 50
Lexeme: {	Code: LeftBracket	Line: 20	Column: 1
Lexeme: return	Code: Return	Line: 21	Column: 9
Lexeme: (	Code: LeftParenthesis	Line: 21	Column: 10
Lexeme: 0	Code: intLit	Line: 21	Column: 12
Lexeme: )	Code: RightParenthesis	Line: 21	Column: 12
Lexeme: ;	Code: Semicolon	Line: 21	Column: 13
Lexeme: }	Code: RightBracket	Line: 22	Column: 1
Lexeme: function	Code: function	Line: 24	Column: 9
Lexeme: QUADRATIC	Code: Id	Line: 24	Column: 19
Lexeme: ::	Code: sr	Line: 24	Column: 20
Lexeme: evaluate	Code: Id	Line: 24	Column: 29
Lexeme: (	Code: LeftParenthesis	Line: 24	Column: 29
Lexeme: x	Code: Id	Line: 24	Column: 31
Lexeme: :	Code: Colon	Line: 24	Column: 32
Lexeme: float	Code: Float	Line: 24	Column: 38
Lexeme: )	Code: RightParenthesis	Line: 24	Column: 38
Lexeme: =>	Code: arrow	Line: 24	Column: 41
Lexeme: float	Code: Float	Line: 24	Column: 48
Lexeme: {	Code: LeftBracket	Line: 25	Column: 1
Lexeme: localvar	Code: localVar	Line: 26	Column: 11
Lexeme: result	Code: Id	Line: 26	Column: 18
Lexeme: :	Code: Colon	Line: 26	Column: 19
Lexeme: float	Code: Float	Line: 26	Column: 25
Lexeme: ;	Code: Semicolon	Line: 26	Column: 25
Lexeme: result	Code: Id	Line: 27	Column: 12
Lexeme: =	Code: Equal	Line: 27	Column: 14
Lexeme: a	Code: Id	Line: 27	Column: 16
Lexeme: ;	Code: Semicolon	Line: 27	Column: 16
Lexeme: result	Code: Id	Line: 28	Column: 9
Lexeme: =	Code: Equal	Line: 28	Column: 11
Lexeme: result	Code: Id	Line: 28	Column: 18
Lexeme: *	Code: Multiplication	Line: 28	Column: 19
Lexeme: x	Code: Id	Line: 28	Column: 22
Lexeme: +	Code: Plus	Line: 28	Column: 23
Lexeme: b	Code: Id	Line: 28	Column: 26
Lexeme: ;	Code: Semicolon	Line: 28	Column: 26
Lexeme: result	Code: Id	Line: 29	Column: 9
Lexeme: =	Code: Equal	Line: 29	Column: 11
Lexeme: result	Code: Id	Line: 29	Column: 18
Lexeme: *	Code: Multiplication	Line: 29	Column: 19
Lexeme: x	Code: Id	Line: 29	Column: 22
Lexeme: +	Code: Plus	Line: 29	Column: 23
Lexeme: c	Code: Id	Line: 29	Column: 26
Lexeme: ;	Code: Semicolon	Line: 29	Column: 26
Lexeme: return	Code: Return	Line: 30	Column: 9
Lexeme: (	Code: LeftParenthesis	Line: 30	Column: 10
Lexeme: result	Code: Id	Line: 30	Column: 17
Lexeme: )	Code: RightParenthesis	Line: 30	Column: 17
Lexeme: ;	Code: Semicolon	Line: 30	Column: 18
Lexeme: }	Code: RightBracket	Line: 31	Column: 1
Lexeme: function	Code: function	Line: 33	Column: 9
Lexeme: QUADRATIC	Code: Id	Line: 33	Column: 19
Lexeme: ::	Code: sr	Line: 33	Column: 20
Lexeme: constructor	Code: constructor	Line: 33	Column: 32
Lexeme: (	Code: LeftParenthesis	Line: 33	Column: 32
Lexeme: A	Code: Id	Line: 33	Column: 34
Lexeme: :	Code: Colon	Line: 33	Column: 35
Lexeme: float	Code: Float	Line: 33	Column: 41
Lexeme: ,	Code: Comma	Line: 33	Column: 41
Lexeme: B	Code: Id	Line: 33	Column: 44
Lexeme: :	Code: Colon	Line: 33	Column: 45
Lexeme: float	Code: Float	Line: 33	Column: 51
Lexeme: ,	Code: Comma	Line: 33	Column: 51
Lexeme: C	Code: Id	Line: 33	Column: 54
Lexeme: :	Code: Colon	Line: 33	Column: 55
Lexeme: float	Code: Float	Line: 33	Column: 61
Lexeme: )	Code: RightParenthesis	Line: 33	Column: 61
Lexeme: {	Code: LeftBracket	Line: 34	Column: 1
Lexeme: self	Code: Id	Line: 35	Column: 7
Lexeme: .	Code: dot	Line: 35	Column: 7
Lexeme: a	Code: Id	Line: 35	Column: 9
Lexeme: =	Code: Equal	Line: 35	Column: 11
Lexeme: A	Code: Id	Line: 35	Column: 13
Lexeme: ;	Code: Semicolon	Line: 35	Column: 13
Lexeme: self	Code: Id	Line: 36	Column: 7
Lexeme: .	Code: dot	Line: 36	Column: 7
Lexeme: b	Code: Id	Line: 36	Column: 9
Lexeme: =	Code: Equal	Line: 36	Column: 11
Lexeme: B	Code: Id	Line: 36	Column: 13
Lexeme: ;	Code: Semicolon	Line: 36	Column: 13
Lexeme: self	Code: Id	Line: 37	Column: 7
Lexeme: .	Code: dot	Line: 37	Column: 7
Lexeme: c	Code: Id	Line: 37	Column: 9
Lexeme: =	Code: Equal	Line: 37	Column: 11
Lexeme: C	Code: Id	Line: 37	Column: 13
Lexeme: ;	Code: Semicolon	Line: 37	Column: 13
Lexeme: }	Code: RightBracket	Line: 38	Column: 1
Lexeme: function	Code: function	Line: 40	Column: 9
Lexeme: LINEAR	Code: Id	Line: 40	Column: 16
Lexeme: ::	Code: sr	Line: 40	Column: 17
Lexeme: constructor	Code: constructor	Line: 40	Column: 29
Lexeme: (	Code: LeftParenthesis	Line: 40	Column: 29
Lexeme: A	Code: Id	Line: 40	Column: 31
Lexeme: :	Code: Colon	Line: 40	Column: 32
Lexeme: float	Code: Float	Line: 40	Column: 38
Lexeme: ,	Code: Comma	Line: 40	Column: 38
Lexeme: B	Code: Id	Line: 40	Column: 41
Lexeme: :	Code: Colon	Line: 40	Column: 42
Lexeme: float	Code: Float	Line: 40	Column: 48
Lexeme: )	Code: RightParenthesis	Line: 40	Column: 48
Lexeme: {	Code: LeftBracket	Line: 41	Column: 1
Lexeme: self	Code: Id	Line: 42	Column: 7
Lexeme: .	Code: dot	Line: 42	Column: 7
Lexeme: a	Code: Id	Line: 42	Column: 9
Lexeme: =	Code: Equal	Line: 42	Column: 11
Lexeme: A	Code: Id	Line: 42	Column: 13
Lexeme: ;	Code: Semicolon	Line: 42	Column: 13
Lexeme: self	Code: Id	Line: 43	Column: 7
Lexeme: .	Code: dot	Line: 43	Column: 7
Lexeme: b	Code: Id	Line: 43	Column: 9
Lexeme: =	Code: Equal	Line: 43	Column: 11
Lexeme: B	Code: Id	Line: 43	Column: 13
Lexeme: ;	Code: Semicolon	Line: 43	Column: 13
Lexeme: }	Code: RightBracket	Line: 44	Column: 1
Lexeme: function	Code: function	Line: 46	Column: 9
Lexeme: LINEAR	Code: Id	Line: 46	Column: 16
Lexeme: ::	Code: sr	Line: 46	Column: 17
Lexeme: evaluate	Code: Id	Line: 46	Column: 26
Lexeme: (	Code: LeftParenthesis	Line: 46	Column: 26
Lexeme: x	Code: Id	Line: 46	Column: 28
Lexeme: :	Code: Colon	Line: 46	Column: 29
Lexeme: float	Code: Float	Line: 46	Column: 35
Lexeme: )	Code: RightParenthesis	Line: 46	Column: 35
Lexeme: =>	Code: arrow	Line: 46	Column: 38
Lexeme: float	Code: Float	Line: 46	Column: 45
Lexeme: {	Code: LeftBracket	Line: 47	Column: 1
Lexeme: localvar	Code: localVar	Line: 48	Column: 11
Lexeme: result	Code: Id	Line: 48	Column: 18
Lexeme: :	Code: Colon	Line: 48	Column: 19
Lexeme: float	Code: Float	Line: 48	Column: 25
Lexeme: ;	Code: Semicolon	Line: 48	Column: 25
Lexeme: result	Code: Id	Line: 49	Column: 9
Lexeme: =	Code: Equal	Line: 49	Column: 11
Lexeme: 0.0	Code: floatLit	Line: 49	Column: 15
Lexeme: ;	Code: Semicolon	Line: 49	Column: 15
Lexeme: result	Code: Id	Line: 50	Column: 9
Lexeme: =	Code: Equal	Line: 50	Column: 11
Lexeme: a	Code: Id	Line: 50	Column: 13
Lexeme: *	Code: Multiplication	Line: 50	Column: 14
Lexeme: x	Code: Id	Line: 50	Column: 17
Lexeme: +	Code: Plus	Line: 50	Column: 18
Lexeme: b	Code: Id	Line: 50	Column: 21
Lexeme: ;	Code: Semicolon	Line: 50	Column: 21
Lexeme: return	Code: Return	Line: 51	Column: 9
Lexeme: (	Code: LeftParenthesis	Line: 51	Column: 10
Lexeme: result	Code: Id	Line: 51	Column: 17
Lexeme: )	Code: RightParenthesis	Line: 51	Column: 17
Lexeme: ;	Code: Semicolon	Line: 51	Column: 18
Lexeme: }	Code: RightBracket	Line: 52	Column: 1
Lexeme: function	Code: function	Line: 54	Column: 10
Lexeme: main	Code: Id	Line: 54	Column: 15
Lexeme: (	Code: LeftParenthesis	Line: 54	Column: 15
Lexeme: )	Code: RightParenthesis	Line: 54	Column: 16
Lexeme: =>	Code: arrow	Line: 54	Column: 19
Lexeme: void	Code: Void	Line: 54	Column: 25
Lexeme: {	Code: LeftBracket	Line: 55	Column: 1
Lexeme: localvar	Code: localVar	Line: 56	Column: 11
Lexeme: f1	Code: Id	Line: 56	Column: 14
Lexeme: :	Code: Colon	Line: 56	Column: 15
Lexeme: LINEAR	Code: Id	Line: 56	Column: 22
Lexeme: (	Code: LeftParenthesis	Line: 56	Column: 22
Lexeme: 2	Code: intLit	Line: 56	Column: 24
Lexeme: ,	Code: Comma	Line: 56	Column: 24
Lexeme: 3.5	Code: floatLit	Line: 56	Column: 29
Lexeme: )	Code: RightParenthesis	Line: 56	Column: 29
Lexeme: ;	Code: Semicolon	Line: 56	Column: 30
Lexeme: localvar	Code: localVar	Line: 57	Column: 11
Lexeme: f2	Code: Id	Line: 57	Column: 14
Lexeme: :	Code: Colon	Line: 57	Column: 15
Lexeme: QUADRATIC	Code: Id	Line: 57	Column: 25
Lexeme: (	Code: LeftParenthesis	Line: 57	Column: 25
Lexeme: -	Code: Minus	Line: 57	Column: 26
Lexeme: 2.0	Code: floatLit	Line: 57	Column: 30
Lexeme: ,	Code: Comma	Line: 57	Column: 30
Lexeme: 1.0	Code: floatLit	Line: 57	Column: 35
Lexeme: ,	Code: Comma	Line: 57	Column: 35
Lexeme: 0.0	Code: floatLit	Line: 57	Column: 40
Lexeme: )	Code: RightParenthesis	Line: 57	Column: 40
Lexeme: ;	Code: Semicolon	Line: 57	Column: 41
Lexeme: localvar	Code: localVar	Line: 58	Column: 11
Lexeme: counter	Code: Id	Line: 58	Column: 19
Lexeme: :	Code: Colon	Line: 58	Column: 20
Lexeme: integer	Code: Integer	Line: 58	Column: 28
Lexeme: ;	Code: Semicolon	Line: 58	Column: 28
Lexeme: counter	Code: Id	Line: 60	Column: 10
Lexeme: =	Code: Equal	Line: 60	Column: 11
Lexeme: 1	Code: intLit	Line: 60	Column: 13
Lexeme: ;	Code: Semicolon	Line: 60	Column: 13
Lexeme: while	Code: While	Line: 62	Column: 8
Lexeme: (	Code: LeftParenthesis	Line: 62	Column: 8
Lexeme: counter	Code: Id	Line: 62	Column: 16
Lexeme: <=	Code: leq	Line: 62	Column: 18
Lexeme: 10	Code: intLit	Line: 62	Column: 22
Lexeme: )	Code: RightParenthesis	Line: 62	Column: 22
Lexeme: {	Code: LeftBracket	Line: 63	Column: 3
Lexeme: write	Code: Write	Line: 64	Column: 10
Lexeme: (	Code: LeftParenthesis	Line: 64	Column: 10
Lexeme: counter	Code: Id	Line: 64	Column: 18
Lexeme: )	Code: RightParenthesis	Line: 64	Column: 18
Lexeme: ;	Code: Semicolon	Line: 64	Column: 19
Lexeme: write	Code: Write	Line: 65	Column: 10
Lexeme: (	Code: LeftParenthesis	Line: 65	Column: 10
Lexeme: f1	Code: Id	Line: 65	Column: 13
Lexeme: .	Code: dot	Line: 65	Column: 13
Lexeme: evaluate	Code: Id	Line: 65	Column: 22
Lexeme: (	Code: LeftParenthesis	Line: 65	Column: 22
Lexeme: counter	Code: Id	Line: 65	Column: 30
Lexeme: )	Code: RightParenthesis	Line: 65	Column: 30
Lexeme: )	Code: RightParenthesis	Line: 65	Column: 31
Lexeme: ;	Code: Semicolon	Line: 65	Column: 32
Lexeme: write	Code: Write	Line: 66	Column: 10
Lexeme: (	Code: LeftParenthesis	Line: 66	Column: 10
Lexeme: f2	Code: Id	Line: 66	Column: 13
Lexeme: .	Code: dot	Line: 66	Column: 13
Lexeme: evaluate	Code: Id	Line: 66	Column: 22
Lexeme: (	Code: LeftParenthesis	Line: 66	Column: 22
Lexeme: counter	Code: Id	Line: 66	Column: 30
Lexeme: )	Code: RightParenthesis	Line: 66	Column: 30
Lexeme: )	Code: RightParenthesis	Line: 66	Column: 31
Lexeme: ;	Code: Semicolon	Line: 66	Column: 32
Lexeme: }	Code: RightBracket	Line: 67	Column: 3
Lexeme: ;	Code: Semicolon	Line: 67	Column: 4


Complete Dervation tree, Code structure:
Start => 
class <identifier> { 
public function <identifier> : ( <identifier> : float ) arrow float ; 
} 
; 
class <identifier> isa <identifier> { 
private attribute <identifier> : float ; 
private attribute <identifier> : float ; 
public constructor : ( <identifier> : float , <identifier> : float ) ; 
public function <identifier> : ( <identifier> : float ) arrow float ; 
} 
; 
class <identifier> isa <identifier> { 
private attribute <identifier> : float ; 
private attribute <identifier> : float ; 
private attribute <identifier> : float ; 
public constructor : ( <identifier> : float , <identifier> : float , <identifier> : float ) ; 
public function <identifier> : ( <identifier> : float ) arrow float ; 
} 
; 
function <identifier> sr <identifier> ( <identifier> : float ) arrow float { 
return ( intLit ) ; 
} 
function <identifier> sr <identifier> ( <identifier> : float ) arrow float { 
localVar <identifier> : float ; 
<identifier> = <identifier> ; 
<identifier> = <identifier> * <identifier> + <identifier> ; 
<identifier> = <identifier> * <identifier> + <identifier> ; 
return ( <identifier> ) ; 
} 
function <identifier> sr constructor ( <identifier> : float , <identifier> : float , <identifier> : float ) { 
<identifier> . <identifier> = <identifier> ; 
<identifier> . <identifier> = <identifier> ; 
<identifier> . <identifier> = <identifier> ; 
} 
function <identifier> sr constructor ( <identifier> : float , <identifier> : float ) { 
<identifier> . <identifier> = <identifier> ; 
<identifier> . <identifier> = <identifier> ; 
} 
function <identifier> sr <identifier> ( <identifier> : float ) arrow float { 
localVar <identifier> : float ; 
<identifier> = floatLit ; 
<identifier> = <identifier> * <identifier> + <identifier> ; 
return ( <identifier> ) ; 
} 
function <identifier> ( ) arrow void { 
localVar <identifier> : <identifier> ( intLit , floatLit ) ; 
localVar <identifier> : <identifier> ( - floatLit , floatLit , floatLit ) ; 
localVar <identifier> : integer ; 
<identifier> = intLit ; 
while ( <identifier> leq intLit ) { 
write ( <identifier> ) ; 
write ( <identifier> . <identifier> ( <identifier> ) ) ; 
write ( <identifier> . <identifier> ( <identifier> ) ) ; 
} 
; 
