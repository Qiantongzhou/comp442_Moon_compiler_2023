Top-down syntax generation:
<Start> =>
function ?<< current: function expected: <identifier> >>
function bubbleSort ?<< current: bubbleSort expected: ( >>
function bubbleSort ( ?<< current: ( expected: <identifier> >>
function bubbleSort ( arr ?<< current: arr expected: : >>
function bubbleSort ( arr : ?<< current: : expected: integer >>
function bubbleSort ( arr : integer ?<< current: integer expected: [ >>
function bubbleSort ( arr : integer [ ?<< current: [ expected: ] >>
function bubbleSort ( arr : integer [ ] ?<< current: ] expected: , >>
function bubbleSort ( arr : integer [ ] , ?<< current: , expected: <identifier> >>
function bubbleSort ( arr : integer [ ] , size ?<< current: size expected: : >>
function bubbleSort ( arr : integer [ ] , size : ?<< current: : expected: integer >>
function bubbleSort ( arr : integer [ ] , size : integer ?<< current: integer expected: ) >>
function bubbleSort ( arr : integer [ ] , size : integer ) ?<< current: ) expected: arrow >>
function bubbleSort ( arr : integer [ ] , size : integer ) => ?<< current: => expected: void >>
function bubbleSort ( arr : integer [ ] , size : integer ) => void ?<< current: void expected: { >>
function bubbleSort ( arr : integer [ ] , size : integer ) => void { ?<< current: { expected: <identifier> >>
function bubbleSort ( arr : integer [ ] , size : integer ) => void { id ?<< current: id expected: . >>
function bubbleSort ( arr : integer [ ] , size : integer ) => void { id . ?<< current: . expected: <identifier> >>
function bubbleSort ( arr : integer [ ] , size : integer ) => void { id . id ?<< current: id expected: . >>
function bubbleSort ( arr : integer [ ] , size : integer ) => void { id . id . ?<< current: . expected: <identifier> >>
function bubbleSort ( arr : integer [ ] , size : integer ) => void { id . id . id ?<< current: id expected: . >>
function bubbleSort ( arr : integer [ ] , size : integer ) => void { id . id . id . ?<< current: . expected: <identifier> >>
function bubbleSort ( arr : integer [ ] , size : integer ) => void { id . id . id . id ?<< current: id expected: ; >>
function bubbleSort ( arr : integer [ ] , size : integer ) => void { id . id . id . id ; ?<< current: ; expected: <identifier> >>
function bubbleSort ( arr : integer [ ] , size : integer ) => void { id . id . id . id ; id ?<< current: id expected: [ >>
function bubbleSort ( arr : integer [ ] , size : integer ) => void { id . id . id . id ; id [ ?<< current: [ expected: intLit >>
function bubbleSort ( arr : integer [ ] , size : integer ) => void { id . id . id . id ; id [ 1 ?<< current: 1 expected: ] >>
function bubbleSort ( arr : integer [ ] , size : integer ) => void { id . id . id . id ; id [ 1 ] ?<< current: ] expected: . >>
function bubbleSort ( arr : integer [ ] , size : integer ) => void { id . id . id . id ; id [ 1 ] . ?<< current: . expected: <identifier> >>
function bubbleSort ( arr : integer [ ] , size : integer ) => void { id . id . id . id ; id [ 1 ] . id ?<< current: id expected: ( >>
function bubbleSort ( arr : integer [ ] , size : integer ) => void { id . id . id . id ; id [ 1 ] . id ( ?<< current: ( expected: ) >>
function bubbleSort ( arr : integer [ ] , size : integer ) => void { id . id . id . id ; id [ 1 ] . id ( ) ?<< current: ) expected: . >>
function bubbleSort ( arr : integer [ ] , size : integer ) => void { id . id . id . id ; id [ 1 ] . id ( ) . ?<< current: . expected: <identifier> >>
function bubbleSort ( arr : integer [ ] , size : integer ) => void { id . id . id . id ; id [ 1 ] . id ( ) . id ?<< current: id expected: ( >>
function bubbleSort ( arr : integer [ ] , size : integer ) => void { id . id . id . id ; id [ 1 ] . id ( ) . id ( ?<< current: ( expected: ) >>
function bubbleSort ( arr : integer [ ] , size : integer ) => void { id . id . id . id ; id [ 1 ] . id ( ) . id ( ) ?<< current: ) expected: ; >>
function bubbleSort ( arr : integer [ ] , size : integer ) => void { id . id . id . id ; id [ 1 ] . id ( ) . id ( ) ; ?<< current: ; expected: } >>


Sytax Tokens:
Lexeme: function	Code: function	Line: 0	Column: 9
Lexeme: bubbleSort	Code: Id	Line: 0	Column: 20
Lexeme: (	Code: LeftParenthesis	Line: 0	Column: 20
Lexeme: arr	Code: Id	Line: 0	Column: 24
Lexeme: :	Code: Colon	Line: 0	Column: 25
Lexeme: integer	Code: Integer	Line: 0	Column: 33
Lexeme: [	Code: zhongkuoL	Line: 0	Column: 33
Lexeme: ]	Code: zhongkuoR	Line: 0	Column: 34
Lexeme: ,	Code: Comma	Line: 0	Column: 35
Lexeme: size	Code: Id	Line: 0	Column: 41
Lexeme: :	Code: Colon	Line: 0	Column: 42
Lexeme: integer	Code: Integer	Line: 0	Column: 50
Lexeme: )	Code: RightParenthesis	Line: 0	Column: 50
Lexeme: =>	Code: arrow	Line: 0	Column: 53
Lexeme: void	Code: Void	Line: 0	Column: 59
Lexeme: {	Code: LeftBracket	Line: 1	Column: 1
Lexeme: id	Code: Id	Line: 2	Column: 5
Lexeme: .	Code: dot	Line: 2	Column: 5
Lexeme: id	Code: Id	Line: 2	Column: 8
Lexeme: .	Code: dot	Line: 2	Column: 8
Lexeme: id	Code: Id	Line: 2	Column: 11
Lexeme: .	Code: dot	Line: 2	Column: 11
Lexeme: id	Code: Id	Line: 2	Column: 14
Lexeme: ;	Code: Semicolon	Line: 2	Column: 14
Lexeme: id	Code: Id	Line: 3	Column: 5
Lexeme: [	Code: zhongkuoL	Line: 3	Column: 5
Lexeme: 1	Code: intLit	Line: 3	Column: 7
Lexeme: ]	Code: zhongkuoR	Line: 3	Column: 7
Lexeme: .	Code: dot	Line: 3	Column: 8
Lexeme: id	Code: Id	Line: 3	Column: 11
Lexeme: (	Code: LeftParenthesis	Line: 3	Column: 11
Lexeme: )	Code: RightParenthesis	Line: 3	Column: 12
Lexeme: .	Code: dot	Line: 3	Column: 13
Lexeme: id	Code: Id	Line: 3	Column: 16
Lexeme: (	Code: LeftParenthesis	Line: 3	Column: 16
Lexeme: )	Code: RightParenthesis	Line: 3	Column: 17
Lexeme: ;	Code: Semicolon	Line: 3	Column: 18


Complete Dervation tree, Code structure:
Start => 
function <identifier> ( <identifier> : integer [ ] , <identifier> : integer ) arrow void { 
<identifier> . <identifier> . <identifier> . <identifier> ; 
<identifier> [ intLit ] . <identifier> ( ) . <identifier> ( ) ; 
