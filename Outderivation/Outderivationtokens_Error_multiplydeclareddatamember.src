Top-down syntax generation:
<Start> =>
class ?<< current: class expected: <identifier> >>
class LINEAR ?<< current: LINEAR expected: { >>
class LINEAR { ?<< current: { expected: private >>
class LINEAR { private ?<< current: private expected: attribute >>
class LINEAR { private attribute ?<< current: attribute expected: <identifier> >>
class LINEAR { private attribute a ?<< current: a expected: : >>
class LINEAR { private attribute a : ?<< current: : expected: float >>
class LINEAR { private attribute a : float ?<< current: float expected: ; >>
class LINEAR { private attribute a : float ; ?<< current: ; expected: private >>
class LINEAR { private attribute a : float ; private ?<< current: private expected: attribute >>
class LINEAR { private attribute a : float ; private attribute ?<< current: attribute expected: <identifier> >>
class LINEAR { private attribute a : float ; private attribute a ?<< current: a expected: : >>
class LINEAR { private attribute a : float ; private attribute a : ?<< current: : expected: float >>
class LINEAR { private attribute a : float ; private attribute a : float ?<< current: float expected: ; >>
class LINEAR { private attribute a : float ; private attribute a : float ; ?<< current: ; expected: } >>
class LINEAR { private attribute a : float ; private attribute a : float ; } ?<< current: } expected: ; >>
class LINEAR { private attribute a : float ; private attribute a : float ; } ; ?<< current: ; expected: class >>
class LINEAR { private attribute a : float ; private attribute a : float ; } ; class ?<< current: class expected: <identifier> >>
class LINEAR { private attribute a : float ; private attribute a : float ; } ; class LINEAR2 ?<< current: LINEAR2 expected: { >>
class LINEAR { private attribute a : float ; private attribute a : float ; } ; class LINEAR2 { ?<< current: { expected: private >>
class LINEAR { private attribute a : float ; private attribute a : float ; } ; class LINEAR2 { private ?<< current: private expected: attribute >>
class LINEAR { private attribute a : float ; private attribute a : float ; } ; class LINEAR2 { private attribute ?<< current: attribute expected: <identifier> >>
class LINEAR { private attribute a : float ; private attribute a : float ; } ; class LINEAR2 { private attribute a ?<< current: a expected: : >>
class LINEAR { private attribute a : float ; private attribute a : float ; } ; class LINEAR2 { private attribute a : ?<< current: : expected: float >>
class LINEAR { private attribute a : float ; private attribute a : float ; } ; class LINEAR2 { private attribute a : float ?<< current: float expected: ; >>
class LINEAR { private attribute a : float ; private attribute a : float ; } ; class LINEAR2 { private attribute a : float ; ?<< current: ; expected: private >>
class LINEAR { private attribute a : float ; private attribute a : float ; } ; class LINEAR2 { private attribute a : float ; private ?<< current: private expected: attribute >>
class LINEAR { private attribute a : float ; private attribute a : float ; } ; class LINEAR2 { private attribute a : float ; private attribute ?<< current: attribute expected: <identifier> >>
class LINEAR { private attribute a : float ; private attribute a : float ; } ; class LINEAR2 { private attribute a : float ; private attribute C ?<< current: C expected: : >>
class LINEAR { private attribute a : float ; private attribute a : float ; } ; class LINEAR2 { private attribute a : float ; private attribute C : ?<< current: : expected: float >>
class LINEAR { private attribute a : float ; private attribute a : float ; } ; class LINEAR2 { private attribute a : float ; private attribute C : float ?<< current: float expected: ; >>
class LINEAR { private attribute a : float ; private attribute a : float ; } ; class LINEAR2 { private attribute a : float ; private attribute C : float ; ?<< current: ; expected: private >>
class LINEAR { private attribute a : float ; private attribute a : float ; } ; class LINEAR2 { private attribute a : float ; private attribute C : float ; private ?<< current: private expected: attribute >>
class LINEAR { private attribute a : float ; private attribute a : float ; } ; class LINEAR2 { private attribute a : float ; private attribute C : float ; private attribute ?<< current: attribute expected: <identifier> >>
class LINEAR { private attribute a : float ; private attribute a : float ; } ; class LINEAR2 { private attribute a : float ; private attribute C : float ; private attribute C ?<< current: C expected: : >>
class LINEAR { private attribute a : float ; private attribute a : float ; } ; class LINEAR2 { private attribute a : float ; private attribute C : float ; private attribute C : ?<< current: : expected: float >>
class LINEAR { private attribute a : float ; private attribute a : float ; } ; class LINEAR2 { private attribute a : float ; private attribute C : float ; private attribute C : float ?<< current: float expected: ; >>
class LINEAR { private attribute a : float ; private attribute a : float ; } ; class LINEAR2 { private attribute a : float ; private attribute C : float ; private attribute C : float ; ?<< current: ; expected: } >>
class LINEAR { private attribute a : float ; private attribute a : float ; } ; class LINEAR2 { private attribute a : float ; private attribute C : float ; private attribute C : float ; } ?<< current: } expected: ; >>


Sytax Tokens:
Lexeme: class	Code: Class	Line: 0	Column: 6
Lexeme: LINEAR	Code: Id	Line: 0	Column: 13
Lexeme: {	Code: LeftBracket	Line: 0	Column: 14
Lexeme: private	Code: Private	Line: 1	Column: 10
Lexeme: attribute	Code: attribute	Line: 1	Column: 20
Lexeme: a	Code: Id	Line: 1	Column: 22
Lexeme: :	Code: Colon	Line: 1	Column: 23
Lexeme: float	Code: Float	Line: 1	Column: 29
Lexeme: ;	Code: Semicolon	Line: 1	Column: 29
Lexeme: private	Code: Private	Line: 2	Column: 10
Lexeme: attribute	Code: attribute	Line: 2	Column: 20
Lexeme: a	Code: Id	Line: 2	Column: 22
Lexeme: :	Code: Colon	Line: 2	Column: 23
Lexeme: float	Code: Float	Line: 2	Column: 29
Lexeme: ;	Code: Semicolon	Line: 2	Column: 29
Lexeme: }	Code: RightBracket	Line: 4	Column: 1
Lexeme: ;	Code: Semicolon	Line: 4	Column: 2
Lexeme: class	Code: Class	Line: 6	Column: 6
Lexeme: LINEAR2	Code: Id	Line: 6	Column: 14
Lexeme: {	Code: LeftBracket	Line: 6	Column: 15
Lexeme: private	Code: Private	Line: 7	Column: 10
Lexeme: attribute	Code: attribute	Line: 7	Column: 20
Lexeme: a	Code: Id	Line: 7	Column: 22
Lexeme: :	Code: Colon	Line: 7	Column: 23
Lexeme: float	Code: Float	Line: 7	Column: 29
Lexeme: ;	Code: Semicolon	Line: 7	Column: 29
Lexeme: private	Code: Private	Line: 8	Column: 10
Lexeme: attribute	Code: attribute	Line: 8	Column: 20
Lexeme: C	Code: Id	Line: 8	Column: 22
Lexeme: :	Code: Colon	Line: 8	Column: 23
Lexeme: float	Code: Float	Line: 8	Column: 29
Lexeme: ;	Code: Semicolon	Line: 8	Column: 29
Lexeme: private	Code: Private	Line: 9	Column: 10
Lexeme: attribute	Code: attribute	Line: 9	Column: 20
Lexeme: C	Code: Id	Line: 9	Column: 22
Lexeme: :	Code: Colon	Line: 9	Column: 23
Lexeme: float	Code: Float	Line: 9	Column: 29
Lexeme: ;	Code: Semicolon	Line: 9	Column: 29
Lexeme: }	Code: RightBracket	Line: 10	Column: 1


Complete Dervation tree, Code structure:
Start => 
class <identifier> { 
private attribute <identifier> : float ; 
private attribute <identifier> : float ; 
} 
; 
class <identifier> { 
private attribute <identifier> : float ; 
private attribute <identifier> : float ; 
private attribute <identifier> : float ; 
} 
