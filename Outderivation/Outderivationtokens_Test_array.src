Top-down syntax generation:
<Start> =>
function ?<< current: function expected: <identifier> >>
function array ?<< current: array expected: ( >>
function array ( ?<< current: ( expected: <identifier> >>
function array ( arr ?<< current: arr expected: : >>
function array ( arr : ?<< current: : expected: integer >>
function array ( arr : integer ?<< current: integer expected: [ >>
function array ( arr : integer [ ?<< current: [ expected: ] >>
function array ( arr : integer [ ] ?<< current: ] expected: , >>
function array ( arr : integer [ ] , ?<< current: , expected: <identifier> >>
function array ( arr : integer [ ] , size ?<< current: size expected: : >>
function array ( arr : integer [ ] , size : ?<< current: : expected: integer >>
function array ( arr : integer [ ] , size : integer ?<< current: integer expected: ) >>
function array ( arr : integer [ ] , size : integer ) ?<< current: ) expected: arrow >>
function array ( arr : integer [ ] , size : integer ) => ?<< current: => expected: void >>
function array ( arr : integer [ ] , size : integer ) => void ?<< current: void expected: { >>
function array ( arr : integer [ ] , size : integer ) => void { ?<< current: { expected: localVar >>
function array ( arr : integer [ ] , size : integer ) => void { localvar ?<< current: localvar expected: <identifier> >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr ?<< current: arr expected: : >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : ?<< current: : expected: integer >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer ?<< current: integer expected: [ >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ ?<< current: [ expected: intLit >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ?<< current: 7 expected: ] >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ?<< current: ] expected: ; >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; ?<< current: ; expected: <identifier> >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr ?<< current: arr expected: [ >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ ?<< current: [ expected: intLit >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ?<< current: 0 expected: ] >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] ?<< current: ] expected: = >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = ?<< current: = expected: intLit >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ?<< current: 64 expected: ; >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ; ?<< current: ; expected: <identifier> >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ; arr ?<< current: arr expected: [ >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ; arr [ ?<< current: [ expected: intLit >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ; arr [ 1 ?<< current: 1 expected: ] >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ; arr [ 1 ] ?<< current: ] expected: = >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ; arr [ 1 ] = ?<< current: = expected: intLit >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ; arr [ 1 ] = 34 ?<< current: 34 expected: ; >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ; arr [ 1 ] = 34 ; ?<< current: ; expected: <identifier> >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ; arr [ 1 ] = 34 ; arr ?<< current: arr expected: [ >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ; arr [ 1 ] = 34 ; arr [ ?<< current: [ expected: intLit >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ?<< current: 2 expected: ] >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] ?<< current: ] expected: = >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = ?<< current: = expected: intLit >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ?<< current: 25 expected: ; >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; ?<< current: ; expected: <identifier> >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; temp ?<< current: temp expected: = >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; temp = ?<< current: = expected: <identifier> >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; temp = arr ?<< current: arr expected: [ >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; temp = arr [ ?<< current: [ expected: <identifier> >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; temp = arr [ j ?<< current: j expected: ] >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; temp = arr [ j ] ?<< current: ] expected: ; >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; temp = arr [ j ] ; ?<< current: ; expected: <identifier> >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; temp = arr [ j ] ; arr ?<< current: arr expected: [ >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; temp = arr [ j ] ; arr [ ?<< current: [ expected: <identifier> >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; temp = arr [ j ] ; arr [ j ?<< current: j expected: ] >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; temp = arr [ j ] ; arr [ j ] ?<< current: ] expected: = >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; temp = arr [ j ] ; arr [ j ] = ?<< current: = expected: <identifier> >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; temp = arr [ j ] ; arr [ j ] = arr ?<< current: arr expected: [ >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; temp = arr [ j ] ; arr [ j ] = arr [ ?<< current: [ expected: <identifier> >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; temp = arr [ j ] ; arr [ j ] = arr [ j ?<< current: j expected: + >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; temp = arr [ j ] ; arr [ j ] = arr [ j + ?<< current: + expected: intLit >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; temp = arr [ j ] ; arr [ j ] = arr [ j + 1 ?<< current: 1 expected: ] >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; temp = arr [ j ] ; arr [ j ] = arr [ j + 1 ] ?<< current: ] expected: ; >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; temp = arr [ j ] ; arr [ j ] = arr [ j + 1 ] ; ?<< current: ; expected: <identifier> >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; temp = arr [ j ] ; arr [ j ] = arr [ j + 1 ] ; arr ?<< current: arr expected: [ >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; temp = arr [ j ] ; arr [ j ] = arr [ j + 1 ] ; arr [ ?<< current: [ expected: <identifier> >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; temp = arr [ j ] ; arr [ j ] = arr [ j + 1 ] ; arr [ j ?<< current: j expected: + >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; temp = arr [ j ] ; arr [ j ] = arr [ j + 1 ] ; arr [ j + ?<< current: + expected: intLit >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; temp = arr [ j ] ; arr [ j ] = arr [ j + 1 ] ; arr [ j + 1 ?<< current: 1 expected: ] >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; temp = arr [ j ] ; arr [ j ] = arr [ j + 1 ] ; arr [ j + 1 ] ?<< current: ] expected: = >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; temp = arr [ j ] ; arr [ j ] = arr [ j + 1 ] ; arr [ j + 1 ] = ?<< current: = expected: <identifier> >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; temp = arr [ j ] ; arr [ j ] = arr [ j + 1 ] ; arr [ j + 1 ] = temp ?<< current: temp expected: ; >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; temp = arr [ j ] ; arr [ j ] = arr [ j + 1 ] ; arr [ j + 1 ] = temp ; ?<< current: ; expected: <identifier> >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; temp = arr [ j ] ; arr [ j ] = arr [ j + 1 ] ; arr [ j + 1 ] = temp ; printarray ?<< current: printarray expected: ( >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; temp = arr [ j ] ; arr [ j ] = arr [ j + 1 ] ; arr [ j + 1 ] = temp ; printarray ( ?<< current: ( expected: <identifier> >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; temp = arr [ j ] ; arr [ j ] = arr [ j + 1 ] ; arr [ j + 1 ] = temp ; printarray ( arr ?<< current: arr expected: , >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; temp = arr [ j ] ; arr [ j ] = arr [ j + 1 ] ; arr [ j + 1 ] = temp ; printarray ( arr , ?<< current: , expected: intLit >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; temp = arr [ j ] ; arr [ j ] = arr [ j + 1 ] ; arr [ j + 1 ] = temp ; printarray ( arr , 7 ?<< current: 7 expected: ) >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; temp = arr [ j ] ; arr [ j ] = arr [ j + 1 ] ; arr [ j + 1 ] = temp ; printarray ( arr , 7 ) ?<< current: ) expected: ; >>
function array ( arr : integer [ ] , size : integer ) => void { localvar arr : integer [ 7 ] ; arr [ 0 ] = 64 ; arr [ 1 ] = 34 ; arr [ 2 ] = 25 ; temp = arr [ j ] ; arr [ j ] = arr [ j + 1 ] ; arr [ j + 1 ] = temp ; printarray ( arr , 7 ) ; ?<< current: ; expected: } >>


Sytax Tokens:
Lexeme: function	Code: function	Line: 0	Column: 9
Lexeme: array	Code: Id	Line: 0	Column: 15
Lexeme: (	Code: LeftParenthesis	Line: 0	Column: 15
Lexeme: arr	Code: Id	Line: 0	Column: 19
Lexeme: :	Code: Colon	Line: 0	Column: 20
Lexeme: integer	Code: Integer	Line: 0	Column: 28
Lexeme: [	Code: zhongkuoL	Line: 0	Column: 28
Lexeme: ]	Code: zhongkuoR	Line: 0	Column: 29
Lexeme: ,	Code: Comma	Line: 0	Column: 30
Lexeme: size	Code: Id	Line: 0	Column: 36
Lexeme: :	Code: Colon	Line: 0	Column: 37
Lexeme: integer	Code: Integer	Line: 0	Column: 45
Lexeme: )	Code: RightParenthesis	Line: 0	Column: 45
Lexeme: =>	Code: arrow	Line: 0	Column: 48
Lexeme: void	Code: Void	Line: 0	Column: 54
Lexeme: {	Code: LeftBracket	Line: 1	Column: 1
Lexeme: localvar	Code: localVar	Line: 2	Column: 11
Lexeme: arr	Code: Id	Line: 2	Column: 15
Lexeme: :	Code: Colon	Line: 2	Column: 16
Lexeme: integer	Code: Integer	Line: 2	Column: 24
Lexeme: [	Code: zhongkuoL	Line: 2	Column: 24
Lexeme: 7	Code: intLit	Line: 2	Column: 26
Lexeme: ]	Code: zhongkuoR	Line: 2	Column: 26
Lexeme: ;	Code: Semicolon	Line: 2	Column: 27
Lexeme: arr	Code: Id	Line: 3	Column: 6
Lexeme: [	Code: zhongkuoL	Line: 3	Column: 6
Lexeme: 0	Code: intLit	Line: 3	Column: 8
Lexeme: ]	Code: zhongkuoR	Line: 3	Column: 8
Lexeme: =	Code: Equal	Line: 3	Column: 11
Lexeme: 64	Code: intLit	Line: 3	Column: 14
Lexeme: ;	Code: Semicolon	Line: 3	Column: 14
Lexeme: arr	Code: Id	Line: 4	Column: 6
Lexeme: [	Code: zhongkuoL	Line: 4	Column: 6
Lexeme: 1	Code: intLit	Line: 4	Column: 8
Lexeme: ]	Code: zhongkuoR	Line: 4	Column: 8
Lexeme: =	Code: Equal	Line: 4	Column: 11
Lexeme: 34	Code: intLit	Line: 4	Column: 14
Lexeme: ;	Code: Semicolon	Line: 4	Column: 14
Lexeme: arr	Code: Id	Line: 5	Column: 6
Lexeme: [	Code: zhongkuoL	Line: 5	Column: 6
Lexeme: 2	Code: intLit	Line: 5	Column: 8
Lexeme: ]	Code: zhongkuoR	Line: 5	Column: 8
Lexeme: =	Code: Equal	Line: 5	Column: 11
Lexeme: 25	Code: intLit	Line: 5	Column: 14
Lexeme: ;	Code: Semicolon	Line: 5	Column: 14
Lexeme: temp	Code: Id	Line: 6	Column: 7
Lexeme: =	Code: Equal	Line: 6	Column: 9
Lexeme: arr	Code: Id	Line: 6	Column: 13
Lexeme: [	Code: zhongkuoL	Line: 6	Column: 13
Lexeme: j	Code: Id	Line: 6	Column: 15
Lexeme: ]	Code: zhongkuoR	Line: 6	Column: 15
Lexeme: ;	Code: Semicolon	Line: 6	Column: 16
Lexeme: arr	Code: Id	Line: 7	Column: 6
Lexeme: [	Code: zhongkuoL	Line: 7	Column: 6
Lexeme: j	Code: Id	Line: 7	Column: 8
Lexeme: ]	Code: zhongkuoR	Line: 7	Column: 8
Lexeme: =	Code: Equal	Line: 7	Column: 11
Lexeme: arr	Code: Id	Line: 7	Column: 15
Lexeme: [	Code: zhongkuoL	Line: 7	Column: 15
Lexeme: j	Code: Id	Line: 7	Column: 17
Lexeme: +	Code: Plus	Line: 7	Column: 17
Lexeme: 1	Code: intLit	Line: 7	Column: 19
Lexeme: ]	Code: zhongkuoR	Line: 7	Column: 19
Lexeme: ;	Code: Semicolon	Line: 7	Column: 20
Lexeme: arr	Code: Id	Line: 8	Column: 6
Lexeme: [	Code: zhongkuoL	Line: 8	Column: 6
Lexeme: j	Code: Id	Line: 8	Column: 8
Lexeme: +	Code: Plus	Line: 8	Column: 8
Lexeme: 1	Code: intLit	Line: 8	Column: 10
Lexeme: ]	Code: zhongkuoR	Line: 8	Column: 10
Lexeme: =	Code: Equal	Line: 8	Column: 13
Lexeme: temp	Code: Id	Line: 8	Column: 18
Lexeme: ;	Code: Semicolon	Line: 8	Column: 18
Lexeme: printarray	Code: Id	Line: 9	Column: 13
Lexeme: (	Code: LeftParenthesis	Line: 9	Column: 13
Lexeme: arr	Code: Id	Line: 9	Column: 17
Lexeme: ,	Code: Comma	Line: 9	Column: 17
Lexeme: 7	Code: intLit	Line: 9	Column: 20
Lexeme: )	Code: RightParenthesis	Line: 9	Column: 20
Lexeme: ;	Code: Semicolon	Line: 9	Column: 21


Complete Dervation tree, Code structure:
Start => 
function <identifier> ( <identifier> : integer [ ] , <identifier> : integer ) arrow void { 
localVar <identifier> : integer [ intLit ] ; 
<identifier> [ intLit ] = intLit ; 
<identifier> [ intLit ] = intLit ; 
<identifier> [ intLit ] = intLit ; 
<identifier> = <identifier> [ <identifier> ] ; 
<identifier> [ <identifier> ] = <identifier> [ <identifier> + intLit ] ; 
<identifier> [ <identifier> + intLit ] = <identifier> ; 
<identifier> ( <identifier> , intLit ) ; 
