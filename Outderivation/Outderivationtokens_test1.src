Top-down syntax generation:
<Start> =>
function ?<< current: function expected: <identifier> >>
function main ?<< current: main expected: ( >>
function main ( ?<< current: ( expected: ) >>
function main ( ) ?<< current: ) expected: arrow >>
function main ( ) => ?<< current: => expected: void >>
function main ( ) => void ?<< current: void expected: { >>
function main ( ) => void { ?<< current: { expected: localVar >>
function main ( ) => void { localvar ?<< current: localvar expected: <identifier> >>
function main ( ) => void { localvar x ?<< current: x expected: : >>
function main ( ) => void { localvar x : ?<< current: : expected: integer >>
function main ( ) => void { localvar x : integer ?<< current: integer expected: [ >>
function main ( ) => void { localvar x : integer [ ?<< current: [ expected: intLit >>
function main ( ) => void { localvar x : integer [ 7 ?<< current: 7 expected: ] >>
function main ( ) => void { localvar x : integer [ 7 ] ?<< current: ] expected: [ >>
function main ( ) => void { localvar x : integer [ 7 ] [ ?<< current: [ expected: intLit >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ?<< current: 7 expected: ] >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ?<< current: ] expected: ; >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; ?<< current: ; expected: localVar >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar ?<< current: localvar expected: <identifier> >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y ?<< current: y expected: : >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : ?<< current: : expected: integer >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer ?<< current: integer expected: [ >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ ?<< current: [ expected: intLit >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ?<< current: 6 expected: ] >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ?<< current: ] expected: ; >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; ?<< current: ; expected: localVar >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar ?<< current: localvar expected: <identifier> >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar z ?<< current: z expected: : >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar z : ?<< current: : expected: integer >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar z : integer ?<< current: integer expected: [ >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar z : integer [ ?<< current: [ expected: intLit >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar z : integer [ 5 ?<< current: 5 expected: ] >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar z : integer [ 5 ] ?<< current: ] expected: ; >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar z : integer [ 5 ] ; ?<< current: ; expected: <identifier> >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar z : integer [ 5 ] ; x ?<< current: x expected: [ >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar z : integer [ 5 ] ; x [ ?<< current: [ expected: intLit >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar z : integer [ 5 ] ; x [ 1 ?<< current: 1 expected: ] >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar z : integer [ 5 ] ; x [ 1 ] ?<< current: ] expected: [ >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar z : integer [ 5 ] ; x [ 1 ] [ ?<< current: [ expected: intLit >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar z : integer [ 5 ] ; x [ 1 ] [ 1 ?<< current: 1 expected: ] >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar z : integer [ 5 ] ; x [ 1 ] [ 1 ] ?<< current: ] expected: = >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar z : integer [ 5 ] ; x [ 1 ] [ 1 ] = ?<< current: = expected: intLit >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar z : integer [ 5 ] ; x [ 1 ] [ 1 ] = 2 ?<< current: 2 expected: ; >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar z : integer [ 5 ] ; x [ 1 ] [ 1 ] = 2 ; ?<< current: ; expected: <identifier> >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar z : integer [ 5 ] ; x [ 1 ] [ 1 ] = 2 ; y ?<< current: y expected: [ >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar z : integer [ 5 ] ; x [ 1 ] [ 1 ] = 2 ; y [ ?<< current: [ expected: intLit >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar z : integer [ 5 ] ; x [ 1 ] [ 1 ] = 2 ; y [ 5 ?<< current: 5 expected: ] >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar z : integer [ 5 ] ; x [ 1 ] [ 1 ] = 2 ; y [ 5 ] ?<< current: ] expected: = >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar z : integer [ 5 ] ; x [ 1 ] [ 1 ] = 2 ; y [ 5 ] = ?<< current: = expected: intLit >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar z : integer [ 5 ] ; x [ 1 ] [ 1 ] = 2 ; y [ 5 ] = 3 ?<< current: 3 expected: ; >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar z : integer [ 5 ] ; x [ 1 ] [ 1 ] = 2 ; y [ 5 ] = 3 ; ?<< current: ; expected: <identifier> >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar z : integer [ 5 ] ; x [ 1 ] [ 1 ] = 2 ; y [ 5 ] = 3 ; z ?<< current: z expected: [ >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar z : integer [ 5 ] ; x [ 1 ] [ 1 ] = 2 ; y [ 5 ] = 3 ; z [ ?<< current: [ expected: intLit >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar z : integer [ 5 ] ; x [ 1 ] [ 1 ] = 2 ; y [ 5 ] = 3 ; z [ 2 ?<< current: 2 expected: ] >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar z : integer [ 5 ] ; x [ 1 ] [ 1 ] = 2 ; y [ 5 ] = 3 ; z [ 2 ] ?<< current: ] expected: = >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar z : integer [ 5 ] ; x [ 1 ] [ 1 ] = 2 ; y [ 5 ] = 3 ; z [ 2 ] = ?<< current: = expected: <identifier> >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar z : integer [ 5 ] ; x [ 1 ] [ 1 ] = 2 ; y [ 5 ] = 3 ; z [ 2 ] = x ?<< current: x expected: [ >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar z : integer [ 5 ] ; x [ 1 ] [ 1 ] = 2 ; y [ 5 ] = 3 ; z [ 2 ] = x [ ?<< current: [ expected: intLit >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar z : integer [ 5 ] ; x [ 1 ] [ 1 ] = 2 ; y [ 5 ] = 3 ; z [ 2 ] = x [ 1 ?<< current: 1 expected: ] >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar z : integer [ 5 ] ; x [ 1 ] [ 1 ] = 2 ; y [ 5 ] = 3 ; z [ 2 ] = x [ 1 ] ?<< current: ] expected: [ >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar z : integer [ 5 ] ; x [ 1 ] [ 1 ] = 2 ; y [ 5 ] = 3 ; z [ 2 ] = x [ 1 ] [ ?<< current: [ expected: intLit >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar z : integer [ 5 ] ; x [ 1 ] [ 1 ] = 2 ; y [ 5 ] = 3 ; z [ 2 ] = x [ 1 ] [ 1 ?<< current: 1 expected: ] >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar z : integer [ 5 ] ; x [ 1 ] [ 1 ] = 2 ; y [ 5 ] = 3 ; z [ 2 ] = x [ 1 ] [ 1 ] ?<< current: ] expected: + >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar z : integer [ 5 ] ; x [ 1 ] [ 1 ] = 2 ; y [ 5 ] = 3 ; z [ 2 ] = x [ 1 ] [ 1 ] + ?<< current: + expected: <identifier> >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar z : integer [ 5 ] ; x [ 1 ] [ 1 ] = 2 ; y [ 5 ] = 3 ; z [ 2 ] = x [ 1 ] [ 1 ] + y ?<< current: y expected: [ >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar z : integer [ 5 ] ; x [ 1 ] [ 1 ] = 2 ; y [ 5 ] = 3 ; z [ 2 ] = x [ 1 ] [ 1 ] + y [ ?<< current: [ expected: intLit >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar z : integer [ 5 ] ; x [ 1 ] [ 1 ] = 2 ; y [ 5 ] = 3 ; z [ 2 ] = x [ 1 ] [ 1 ] + y [ 5 ?<< current: 5 expected: ] >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar z : integer [ 5 ] ; x [ 1 ] [ 1 ] = 2 ; y [ 5 ] = 3 ; z [ 2 ] = x [ 1 ] [ 1 ] + y [ 5 ] ?<< current: ] expected: ; >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar z : integer [ 5 ] ; x [ 1 ] [ 1 ] = 2 ; y [ 5 ] = 3 ; z [ 2 ] = x [ 1 ] [ 1 ] + y [ 5 ] ; ?<< current: ; expected: write >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar z : integer [ 5 ] ; x [ 1 ] [ 1 ] = 2 ; y [ 5 ] = 3 ; z [ 2 ] = x [ 1 ] [ 1 ] + y [ 5 ] ; write ?<< current: write expected: ( >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar z : integer [ 5 ] ; x [ 1 ] [ 1 ] = 2 ; y [ 5 ] = 3 ; z [ 2 ] = x [ 1 ] [ 1 ] + y [ 5 ] ; write ( ?<< current: ( expected: <identifier> >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar z : integer [ 5 ] ; x [ 1 ] [ 1 ] = 2 ; y [ 5 ] = 3 ; z [ 2 ] = x [ 1 ] [ 1 ] + y [ 5 ] ; write ( z ?<< current: z expected: [ >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar z : integer [ 5 ] ; x [ 1 ] [ 1 ] = 2 ; y [ 5 ] = 3 ; z [ 2 ] = x [ 1 ] [ 1 ] + y [ 5 ] ; write ( z [ ?<< current: [ expected: intLit >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar z : integer [ 5 ] ; x [ 1 ] [ 1 ] = 2 ; y [ 5 ] = 3 ; z [ 2 ] = x [ 1 ] [ 1 ] + y [ 5 ] ; write ( z [ 2 ?<< current: 2 expected: ] >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar z : integer [ 5 ] ; x [ 1 ] [ 1 ] = 2 ; y [ 5 ] = 3 ; z [ 2 ] = x [ 1 ] [ 1 ] + y [ 5 ] ; write ( z [ 2 ] ?<< current: ] expected: ) >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar z : integer [ 5 ] ; x [ 1 ] [ 1 ] = 2 ; y [ 5 ] = 3 ; z [ 2 ] = x [ 1 ] [ 1 ] + y [ 5 ] ; write ( z [ 2 ] ) ?<< current: ) expected: ; >>
function main ( ) => void { localvar x : integer [ 7 ] [ 7 ] ; localvar y : integer [ 6 ] ; localvar z : integer [ 5 ] ; x [ 1 ] [ 1 ] = 2 ; y [ 5 ] = 3 ; z [ 2 ] = x [ 1 ] [ 1 ] + y [ 5 ] ; write ( z [ 2 ] ) ; ?<< current: ; expected: } >>


Sytax Tokens:
Lexeme: function	Code: function	Line: 1	Column: 9
Lexeme: main	Code: Id	Line: 1	Column: 14
Lexeme: (	Code: LeftParenthesis	Line: 1	Column: 14
Lexeme: )	Code: RightParenthesis	Line: 1	Column: 15
Lexeme: =>	Code: arrow	Line: 1	Column: 18
Lexeme: void	Code: Void	Line: 1	Column: 24
Lexeme: {	Code: LeftBracket	Line: 2	Column: 1
Lexeme: localvar	Code: localVar	Line: 3	Column: 11
Lexeme: x	Code: Id	Line: 3	Column: 13
Lexeme: :	Code: Colon	Line: 3	Column: 14
Lexeme: integer	Code: Integer	Line: 3	Column: 22
Lexeme: [	Code: zhongkuoL	Line: 3	Column: 22
Lexeme: 7	Code: intLit	Line: 3	Column: 24
Lexeme: ]	Code: zhongkuoR	Line: 3	Column: 24
Lexeme: [	Code: zhongkuoL	Line: 3	Column: 25
Lexeme: 7	Code: intLit	Line: 3	Column: 27
Lexeme: ]	Code: zhongkuoR	Line: 3	Column: 27
Lexeme: ;	Code: Semicolon	Line: 3	Column: 28
Lexeme: localvar	Code: localVar	Line: 4	Column: 11
Lexeme: y	Code: Id	Line: 4	Column: 13
Lexeme: :	Code: Colon	Line: 4	Column: 14
Lexeme: integer	Code: Integer	Line: 4	Column: 22
Lexeme: [	Code: zhongkuoL	Line: 4	Column: 22
Lexeme: 6	Code: intLit	Line: 4	Column: 24
Lexeme: ]	Code: zhongkuoR	Line: 4	Column: 24
Lexeme: ;	Code: Semicolon	Line: 4	Column: 25
Lexeme: localvar	Code: localVar	Line: 5	Column: 11
Lexeme: z	Code: Id	Line: 5	Column: 13
Lexeme: :	Code: Colon	Line: 5	Column: 14
Lexeme: integer	Code: Integer	Line: 5	Column: 22
Lexeme: [	Code: zhongkuoL	Line: 5	Column: 22
Lexeme: 5	Code: intLit	Line: 5	Column: 24
Lexeme: ]	Code: zhongkuoR	Line: 5	Column: 24
Lexeme: ;	Code: Semicolon	Line: 5	Column: 25
Lexeme: x	Code: Id	Line: 6	Column: 4
Lexeme: [	Code: zhongkuoL	Line: 6	Column: 4
Lexeme: 1	Code: intLit	Line: 6	Column: 6
Lexeme: ]	Code: zhongkuoR	Line: 6	Column: 6
Lexeme: [	Code: zhongkuoL	Line: 6	Column: 7
Lexeme: 1	Code: intLit	Line: 6	Column: 9
Lexeme: ]	Code: zhongkuoR	Line: 6	Column: 9
Lexeme: =	Code: Equal	Line: 6	Column: 11
Lexeme: 2	Code: intLit	Line: 6	Column: 12
Lexeme: ;	Code: Semicolon	Line: 6	Column: 12
Lexeme: y	Code: Id	Line: 7	Column: 4
Lexeme: [	Code: zhongkuoL	Line: 7	Column: 4
Lexeme: 5	Code: intLit	Line: 7	Column: 6
Lexeme: ]	Code: zhongkuoR	Line: 7	Column: 6
Lexeme: =	Code: Equal	Line: 7	Column: 8
Lexeme: 3	Code: intLit	Line: 7	Column: 9
Lexeme: ;	Code: Semicolon	Line: 7	Column: 9
Lexeme: z	Code: Id	Line: 8	Column: 4
Lexeme: [	Code: zhongkuoL	Line: 8	Column: 4
Lexeme: 2	Code: intLit	Line: 8	Column: 6
Lexeme: ]	Code: zhongkuoR	Line: 8	Column: 6
Lexeme: =	Code: Equal	Line: 8	Column: 8
Lexeme: x	Code: Id	Line: 8	Column: 9
Lexeme: [	Code: zhongkuoL	Line: 8	Column: 9
Lexeme: 1	Code: intLit	Line: 8	Column: 11
Lexeme: ]	Code: zhongkuoR	Line: 8	Column: 11
Lexeme: [	Code: zhongkuoL	Line: 8	Column: 12
Lexeme: 1	Code: intLit	Line: 8	Column: 14
Lexeme: ]	Code: zhongkuoR	Line: 8	Column: 14
Lexeme: +	Code: Plus	Line: 8	Column: 15
Lexeme: y	Code: Id	Line: 8	Column: 17
Lexeme: [	Code: zhongkuoL	Line: 8	Column: 17
Lexeme: 5	Code: intLit	Line: 8	Column: 19
Lexeme: ]	Code: zhongkuoR	Line: 8	Column: 19
Lexeme: ;	Code: Semicolon	Line: 8	Column: 20
Lexeme: write	Code: Write	Line: 9	Column: 8
Lexeme: (	Code: LeftParenthesis	Line: 9	Column: 8
Lexeme: z	Code: Id	Line: 9	Column: 10
Lexeme: [	Code: zhongkuoL	Line: 9	Column: 10
Lexeme: 2	Code: intLit	Line: 9	Column: 12
Lexeme: ]	Code: zhongkuoR	Line: 9	Column: 12
Lexeme: )	Code: RightParenthesis	Line: 9	Column: 13
Lexeme: ;	Code: Semicolon	Line: 9	Column: 14


Complete Dervation tree, Code structure:
Start => 
function <identifier> ( ) arrow void { 
localVar <identifier> : integer [ intLit ] [ intLit ] ; 
localVar <identifier> : integer [ intLit ] ; 
localVar <identifier> : integer [ intLit ] ; 
<identifier> [ intLit ] [ intLit ] = intLit ; 
<identifier> [ intLit ] = intLit ; 
<identifier> [ intLit ] = <identifier> [ intLit ] [ intLit ] + <identifier> [ intLit ] ; 
write ( <identifier> [ intLit ] ) ; 
